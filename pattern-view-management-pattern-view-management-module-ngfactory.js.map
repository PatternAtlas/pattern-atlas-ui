{"version":3,"sources":["./node_modules/@angular/cdk/fesm5/tree.js","./node_modules/@angular/material/checkbox/index.d.ts.MatCheckbox.html","./node_modules/@angular/material/fesm5/tree.js","./node_modules/@angular/material/tree/index.d.ts.MatTree.html","./src/app/pattern-view-management/add-to-view/add-to-view.component.html","./src/app/pattern-view-management/add-to-view/add-to-view.component.ts","./src/app/pattern-view-management/pattern-view-management.module.ts","./src/app/pattern-view-management/pattern-view-management/pattern-view-management.component.html","./src/app/pattern-view-management/pattern-view-management/pattern-view-management.component.ts","./src/app/pattern-view-management/pattern-view-renderer/pattern-view-renderer.component.html","./src/app/pattern-view-management/pattern-view-renderer/pattern-view-renderer.component.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsD;AACkB;AACN;AACT;AAC+N;AACrO;AACiC;AACnC;;AAEjD;AACA;AACA;AACA;AACA,kCAAkC,uEAAc;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,sDAAQ;AACxD,oDAAoD,sDAAQ;AAC5D;AACA;AACA;AACA;AACA;AACA,gDAAgD,sDAAQ;AACxD,sDAAsD,sDAAQ;AAC9D;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,yFAAyF;AAC7H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,sDAAQ;AAC5D;AACA;AACA,CAAC;;AAED;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,sDAAQ;AAC3B,SAAS;AACT,oDAAoD,sDAAQ;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,kDAAkD,EAAE;AACxG;AACA,iBAAiB,yDAAY;AAC7B;AACA;AACA,+BAA+B,2DAAI,KAAK,6DAAM;AAC9C;AACA;AACA;AACA,0CAA0C,sDAAQ,6CAA6C,oBAAoB;AACnH;AACA;AACA;AACA;AACA,+BAA+B,QAAQ,gBAAgB;AACvD;AACA;AACA;AACA;AACA,6BAA6B,0BAA0B;AACvD;AACA,aAAa;AACb;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,4DAAc;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA,iBAAiB;AACjB;AACA;AACA,oDAAoD;AACpD,SAAS,OAAO,8DAAgB,EAAE;AAClC,SAAS,gCAAgC,OAAO,oDAAM,sCAAsC,GAAG,OAAO,sDAAQ,EAAE;AAChH,MAAM;AACN;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iDAAiD;AACjD,SAAS,OAAO,yDAAW;AAC3B,MAAM;AACN;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,4CAAO;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,oDAAe,EAAE,kCAAkC;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,yBAAyB,EAAE;AACrD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,kBAAkB,EAAE;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,6EAAY;AACxB;AACA;AACA,iBAAiB,yDAAY;AAC7B;AACA;AACA;AACA,yBAAyB,+CAAE;AAC3B;AACA;AACA,qDAAqD,gEAAS;AAC9D,4CAA4C,sCAAsC,EAAE;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,+BAA+B;AACnE,uCAAuC,gDAAgD;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,sCAAsC,EAAE;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,mCAAmC,+DAAiB;AACpD;AACA;AACA;AACA;AACA,qCAAqC,qEAAuB;AAC5D,iBAAiB;AACjB;AACA;AACA,0CAA0C;AAC1C,SAAS,OAAO,6DAAe,EAAE;AACjC,SAAS,OAAO,+DAAiB;AACjC,MAAM;AACN;AACA,sBAAsB,OAAO,mDAAK,EAAE;AACpC,uBAAuB,OAAO,mDAAK,EAAE;AACrC,mBAAmB,OAAO,mDAAK,EAAE;AACjC,uBAAuB,OAAO,uDAAS,6BAA6B,eAAe,IAAI;AACvF,qBAAqB,OAAO,6DAAe;AAC3C;AACA;AACA;AACA,qBAAqB,IAAI;AACzB;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,4CAAO;AACrC;AACA,gCAAgC,4CAAO;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,mBAAmB,EAAE;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,yDAAY;AACjC,mCAAmC,gEAAS;AAC5C,oDAAoD,6CAA6C,EAAE;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA,8CAA8C;AAC9C,SAAS,OAAO,wDAAU,EAAE;AAC5B,SAAS;AACT,MAAM;AACN;AACA,gBAAgB,OAAO,mDAAK,EAAE;AAC9B;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,yDAAY;AAC7B,+BAA+B,gEAAS;AACxC,8CAA8C,0CAA0C,EAAE;AAC1F;AACA,qCAAqC,gEAAS;AAC9C,oCAAoC,oCAAoC,EAAE;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,gDAAgD,EAAE;AAC5G;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,yBAAyB,uDAAuD;AAChF,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA;AACA,oDAAoD;AACpD,SAAS,OAAO,wDAAU,EAAE;AAC5B,SAAS,gBAAgB;AACzB,SAAS,OAAO,6DAAe;AAC/B,MAAM;AACN;AACA,sBAAsB,OAAO,6DAAe;AAC5C;AACA;AACA;AACA,qBAAqB,IAAI;AACzB;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,4CAAO;AACrC;AACA;AACA;AACA;AACA;AACA,6BAA6B,gEAAS,0CAA0C,gCAAgC,EAAE;AAClH;AACA;AACA;AACA;AACA,sDAAsD,4BAA4B,EAAE;AACpF;AACA;AACA;AACA,0BAA0B,oBAAoB,EAAE;AAChD;AACA;AACA;AACA;AACA,0BAA0B,kFAAoB;AAC9C;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,0BAA0B,qBAAqB,EAAE;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,kFAAoB;AAC/C;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,qBAAqB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA,iBAAiB;AACjB;AACA;AACA,qDAAqD;AACrD,SAAS,oBAAoB;AAC7B,SAAS,gBAAgB;AACzB,SAAS,OAAO,uDAAS,EAAE;AAC3B,SAAS,OAAO,wDAAU,EAAE;AAC5B,SAAS,OAAO,gEAAc,gBAAgB,OAAO,sDAAQ,EAAE;AAC/D,MAAM;AA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gCAAgC,OAAO,oDAAM,SAAS,2EAAyB,IAAI,GAAG,OAAO,sDAAQ,EAAE;AAChH,MAAM;AACN;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,mCAAmC,+DAAiB;AACpD;AACA;AACA,qCAAqC,qEAAuB;AAC5D,iCAAiC,UAAU,yDAAO,wBAAwB;AAC1E,wCAAwC,cAAc,eAAe,aAAa,mBAAmB,gBAAgB,OAAO,qBAAqB,sBAAsB,sBAAsB;AAC7L,iBAAiB;AACjB;AACA;AACA,uBAAuB,OAAO,uDAAS,6BAA6B,eAAe,IAAI;AACvF;AACA;AACA,CAAC,CAAC,yDAAO;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA,iCAAiC,UAAU,mEAAiB,kCAAkC;AAC9F,iBAAiB;AACjB;AACA;AACA,qBAAqB,OAAO,mDAAK,yCAAyC;AAC1E;AACA;AACA,CAAC,CAAC,mEAAiB;;AAEnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,sDAAQ;AACxB,8BAA8B,+DAAa,EAAE,sEAAe;AAC5D;AACA;AACA,iBAAiB;AACjB;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,2DAAI;AAC3C;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,qDAAqD,EAAE;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,2BAA2B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA,qCAAqC,kBAAkB;AACvD;AACA;AACA;AACA,mCAAmC,oDAAe;AAClD,kCAAkC,oDAAe;AACjD,0BAA0B,oDAAe;AACzC;AACA;AACA;AACA,0BAA0B,yBAAyB,EAAE;AACrD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,0CAAK,eAAe,sDAAQ,gBAAgB,0DAAG;AAC9D;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,mEAAU;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA,0BAA0B,oDAAe;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,yBAAyB,EAAE;AACrD,+BAA+B,wBAAwB,EAAE;AACzD;AACA;AACA,KAAK;AACL;AACA;AACA,eAAe,0CAAK,eAAe,sDAAQ,kDAAkD,0DAAG;AAChG;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,mEAAU;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAE8M;AAC9M;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mLC9fA,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","file":"pattern-view-management-pattern-view-management-module-ngfactory.js","sourcesContent":["import { __spread, __extends, __values } from 'tslib';\nimport { SelectionModel, isDataSource } from '@angular/cdk/collections';\nimport { isObservable, Subject, BehaviorSubject, of } from 'rxjs';\nimport { take, filter, takeUntil } from 'rxjs/operators';\nimport { InjectionToken, Directive, ViewContainerRef, Inject, Optional, TemplateRef, Component, ViewEncapsulation, ChangeDetectionStrategy, IterableDiffers, ChangeDetectorRef, Input, ViewChild, ContentChildren, ElementRef, Renderer2, HostListener, NgModule } from '@angular/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { FocusMonitor } from '@angular/cdk/a11y';\n\n/** Base tree control. It has basic toggle/expand/collapse operations on a single data node. */\nvar BaseTreeControl = /** @class */ (function () {\n    function BaseTreeControl() {\n        /** A selection model with multi-selection to track expansion status. */\n        this.expansionModel = new SelectionModel(true);\n    }\n    /** Toggles one single data node's expanded/collapsed state. */\n    BaseTreeControl.prototype.toggle = function (dataNode) {\n        this.expansionModel.toggle(dataNode);\n    };\n    /** Expands one single data node. */\n    BaseTreeControl.prototype.expand = function (dataNode) {\n        this.expansionModel.select(dataNode);\n    };\n    /** Collapses one single data node. */\n    BaseTreeControl.prototype.collapse = function (dataNode) {\n        this.expansionModel.deselect(dataNode);\n    };\n    /** Whether a given data node is expanded or not. Returns true if the data node is expanded. */\n    BaseTreeControl.prototype.isExpanded = function (dataNode) {\n        return this.expansionModel.isSelected(dataNode);\n    };\n    /** Toggles a subtree rooted at `node` recursively. */\n    BaseTreeControl.prototype.toggleDescendants = function (dataNode) {\n        this.expansionModel.isSelected(dataNode)\n            ? this.collapseDescendants(dataNode)\n            : this.expandDescendants(dataNode);\n    };\n    /** Collapse all dataNodes in the tree. */\n    BaseTreeControl.prototype.collapseAll = function () {\n        this.expansionModel.clear();\n    };\n    /** Expands a subtree rooted at given data node recursively. */\n    BaseTreeControl.prototype.expandDescendants = function (dataNode) {\n        var _a;\n        var toBeProcessed = [dataNode];\n        toBeProcessed.push.apply(toBeProcessed, __spread(this.getDescendants(dataNode)));\n        (_a = this.expansionModel).select.apply(_a, __spread(toBeProcessed));\n    };\n    /** Collapses a subtree rooted at given data node recursively. */\n    BaseTreeControl.prototype.collapseDescendants = function (dataNode) {\n        var _a;\n        var toBeProcessed = [dataNode];\n        toBeProcessed.push.apply(toBeProcessed, __spread(this.getDescendants(dataNode)));\n        (_a = this.expansionModel).deselect.apply(_a, __spread(toBeProcessed));\n    };\n    return BaseTreeControl;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Flat tree control. Able to expand/collapse a subtree recursively for flattened tree. */\nvar FlatTreeControl = /** @class */ (function (_super) {\n    __extends(FlatTreeControl, _super);\n    /** Construct with flat tree data node functions getLevel and isExpandable. */\n    function FlatTreeControl(getLevel, isExpandable) {\n        var _this = _super.call(this) || this;\n        _this.getLevel = getLevel;\n        _this.isExpandable = isExpandable;\n        return _this;\n    }\n    /**\n     * Gets a list of the data node's subtree of descendent data nodes.\n     *\n     * To make this working, the `dataNodes` of the TreeControl must be flattened tree nodes\n     * with correct levels.\n     */\n    FlatTreeControl.prototype.getDescendants = function (dataNode) {\n        var startIndex = this.dataNodes.indexOf(dataNode);\n        var results = [];\n        // Goes through flattened tree nodes in the `dataNodes` array, and get all descendants.\n        // The level of descendants of a tree node must be greater than the level of the given\n        // tree node.\n        // If we reach a node whose level is equal to the level of the tree node, we hit a sibling.\n        // If we reach a node whose level is greater than the level of the tree node, we hit a\n        // sibling of an ancestor.\n        for (var i = startIndex + 1; i < this.dataNodes.length && this.getLevel(dataNode) < this.getLevel(this.dataNodes[i]); i++) {\n            results.push(this.dataNodes[i]);\n        }\n        return results;\n    };\n    /**\n     * Expands all data nodes in the tree.\n     *\n     * To make this working, the `dataNodes` variable of the TreeControl must be set to all flattened\n     * data nodes of the tree.\n     */\n    FlatTreeControl.prototype.expandAll = function () {\n        var _a;\n        (_a = this.expansionModel).select.apply(_a, __spread(this.dataNodes));\n    };\n    return FlatTreeControl;\n}(BaseTreeControl));\n\n/** Nested tree control. Able to expand/collapse a subtree recursively for NestedNode type. */\nvar NestedTreeControl = /** @class */ (function (_super) {\n    __extends(NestedTreeControl, _super);\n    /** Construct with nested tree function getChildren. */\n    function NestedTreeControl(getChildren) {\n        var _this = _super.call(this) || this;\n        _this.getChildren = getChildren;\n        return _this;\n    }\n    /**\n     * Expands all dataNodes in the tree.\n     *\n     * To make this working, the `dataNodes` variable of the TreeControl must be set to all root level\n     * data nodes of the tree.\n     */\n    NestedTreeControl.prototype.expandAll = function () {\n        var _a;\n        var _this = this;\n        this.expansionModel.clear();\n        var allNodes = this.dataNodes.reduce(function (accumulator, dataNode) {\n            return __spread(accumulator, _this.getDescendants(dataNode), [dataNode]);\n        }, []);\n        (_a = this.expansionModel).select.apply(_a, __spread(allNodes));\n    };\n    /** Gets a list of descendant dataNodes of a subtree rooted at given data node recursively. */\n    NestedTreeControl.prototype.getDescendants = function (dataNode) {\n        var descendants = [];\n        this._getDescendants(descendants, dataNode);\n        // Remove the node itself\n        return descendants.splice(1);\n    };\n    /** A helper function to get descendants recursively. */\n    NestedTreeControl.prototype._getDescendants = function (descendants, dataNode) {\n        var _this = this;\n        descendants.push(dataNode);\n        var childrenNodes = this.getChildren(dataNode);\n        if (Array.isArray(childrenNodes)) {\n            childrenNodes.forEach(function (child) { return _this._getDescendants(descendants, child); });\n        }\n        else if (isObservable(childrenNodes)) {\n            // TypeScript as of version 3.5 doesn't seem to treat `Boolean` like a function that\n            // returns a `boolean` specifically in the context of `filter`, so we manually clarify that.\n            childrenNodes.pipe(take(1), filter(Boolean))\n                .subscribe(function (children) {\n                var e_1, _a;\n                try {\n                    for (var children_1 = __values(children), children_1_1 = children_1.next(); !children_1_1.done; children_1_1 = children_1.next()) {\n                        var child = children_1_1.value;\n                        _this._getDescendants(descendants, child);\n                    }\n                }\n                catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                finally {\n                    try {\n                        if (children_1_1 && !children_1_1.done && (_a = children_1.return)) _a.call(children_1);\n                    }\n                    finally { if (e_1) throw e_1.error; }\n                }\n            });\n        }\n    };\n    return NestedTreeControl;\n}(BaseTreeControl));\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token used to provide a `CdkTreeNode` to its outlet.\n * Used primarily to avoid circular imports.\n * @docs-private\n */\nvar CDK_TREE_NODE_OUTLET_NODE = new InjectionToken('CDK_TREE_NODE_OUTLET_NODE');\n/**\n * Outlet for nested CdkNode. Put `[cdkTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\nvar CdkTreeNodeOutlet = /** @class */ (function () {\n    function CdkTreeNodeOutlet(viewContainer, _node) {\n        this.viewContainer = viewContainer;\n        this._node = _node;\n    }\n    CdkTreeNodeOutlet.decorators = [\n        { type: Directive, args: [{\n                    selector: '[cdkTreeNodeOutlet]'\n                },] }\n    ];\n    /** @nocollapse */\n    CdkTreeNodeOutlet.ctorParameters = function () { return [\n        { type: ViewContainerRef },\n        { type: undefined, decorators: [{ type: Inject, args: [CDK_TREE_NODE_OUTLET_NODE,] }, { type: Optional }] }\n    ]; };\n    return CdkTreeNodeOutlet;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Context provided to the tree node component. */\nvar CdkTreeNodeOutletContext = /** @class */ (function () {\n    function CdkTreeNodeOutletContext(data) {\n        this.$implicit = data;\n    }\n    return CdkTreeNodeOutletContext;\n}());\n/**\n * Data node definition for the CdkTree.\n * Captures the node's template and a when predicate that describes when this node should be used.\n */\nvar CdkTreeNodeDef = /** @class */ (function () {\n    /** @docs-private */\n    function CdkTreeNodeDef(template) {\n        this.template = template;\n    }\n    CdkTreeNodeDef.decorators = [\n        { type: Directive, args: [{\n                    selector: '[cdkTreeNodeDef]',\n                    inputs: [\n                        'when: cdkTreeNodeDefWhen'\n                    ],\n                },] }\n    ];\n    /** @nocollapse */\n    CdkTreeNodeDef.ctorParameters = function () { return [\n        { type: TemplateRef }\n    ]; };\n    return CdkTreeNodeDef;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an error to be thrown when there is no usable data.\n * @docs-private\n */\nfunction getTreeNoValidDataSourceError() {\n    return Error(\"A valid data source must be provided.\");\n}\n/**\n * Returns an error to be thrown when there are multiple nodes that are missing a when function.\n * @docs-private\n */\nfunction getTreeMultipleDefaultNodeDefsError() {\n    return Error(\"There can only be one default row without a when predicate function.\");\n}\n/**\n * Returns an error to be thrown when there are no matching node defs for a particular set of data.\n * @docs-private\n */\nfunction getTreeMissingMatchingNodeDefError() {\n    return Error(\"Could not find a matching node definition for the provided node data.\");\n}\n/**\n * Returns an error to be thrown when there are tree control.\n * @docs-private\n */\nfunction getTreeControlMissingError() {\n    return Error(\"Could not find a tree control for the tree.\");\n}\n/**\n * Returns an error to be thrown when tree control did not implement functions for flat/nested node.\n * @docs-private\n */\nfunction getTreeControlFunctionsMissingError() {\n    return Error(\"Could not find functions for nested/flat tree in tree control.\");\n}\n\n/**\n * CDK tree component that connects with a data source to retrieve data of type `T` and renders\n * dataNodes with hierarchy. Updates the dataNodes when new data is provided by the data source.\n */\nvar CdkTree = /** @class */ (function () {\n    function CdkTree(_differs, _changeDetectorRef) {\n        this._differs = _differs;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** Subject that emits when the component has been destroyed. */\n        this._onDestroy = new Subject();\n        /** Level of nodes */\n        this._levels = new Map();\n        // TODO(tinayuangao): Setup a listener for scrolling, emit the calculated view to viewChange.\n        //     Remove the MAX_VALUE in viewChange\n        /**\n         * Stream containing the latest information on what rows are being displayed on screen.\n         * Can be used by the data source to as a heuristic of what data should be provided.\n         */\n        this.viewChange = new BehaviorSubject({ start: 0, end: Number.MAX_VALUE });\n    }\n    Object.defineProperty(CdkTree.prototype, \"dataSource\", {\n        /**\n         * Provides a stream containing the latest data array to render. Influenced by the tree's\n         * stream of view window (what dataNodes are currently on screen).\n         * Data source can be an observable of data array, or a data array to render.\n         */\n        get: function () { return this._dataSource; },\n        set: function (dataSource) {\n            if (this._dataSource !== dataSource) {\n                this._switchDataSource(dataSource);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CdkTree.prototype.ngOnInit = function () {\n        this._dataDiffer = this._differs.find([]).create(this.trackBy);\n        if (!this.treeControl) {\n            throw getTreeControlMissingError();\n        }\n    };\n    CdkTree.prototype.ngOnDestroy = function () {\n        this._nodeOutlet.viewContainer.clear();\n        this._onDestroy.next();\n        this._onDestroy.complete();\n        if (this._dataSource && typeof this._dataSource.disconnect === 'function') {\n            this.dataSource.disconnect(this);\n        }\n        if (this._dataSubscription) {\n            this._dataSubscription.unsubscribe();\n            this._dataSubscription = null;\n        }\n    };\n    CdkTree.prototype.ngAfterContentChecked = function () {\n        var defaultNodeDefs = this._nodeDefs.filter(function (def) { return !def.when; });\n        if (defaultNodeDefs.length > 1) {\n            throw getTreeMultipleDefaultNodeDefsError();\n        }\n        this._defaultNodeDef = defaultNodeDefs[0];\n        if (this.dataSource && this._nodeDefs && !this._dataSubscription) {\n            this._observeRenderChanges();\n        }\n    };\n    // TODO(tinayuangao): Work on keyboard traversal and actions, make sure it's working for RTL\n    //     and nested trees.\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the node outlet. Otherwise start listening for new data.\n     */\n    CdkTree.prototype._switchDataSource = function (dataSource) {\n        if (this._dataSource && typeof this._dataSource.disconnect === 'function') {\n            this.dataSource.disconnect(this);\n        }\n        if (this._dataSubscription) {\n            this._dataSubscription.unsubscribe();\n            this._dataSubscription = null;\n        }\n        // Remove the all dataNodes if there is now no data source\n        if (!dataSource) {\n            this._nodeOutlet.viewContainer.clear();\n        }\n        this._dataSource = dataSource;\n        if (this._nodeDefs) {\n            this._observeRenderChanges();\n        }\n    };\n    /** Set up a subscription for the data provided by the data source. */\n    CdkTree.prototype._observeRenderChanges = function () {\n        var _this = this;\n        var dataStream;\n        if (isDataSource(this._dataSource)) {\n            dataStream = this._dataSource.connect(this);\n        }\n        else if (isObservable(this._dataSource)) {\n            dataStream = this._dataSource;\n        }\n        else if (Array.isArray(this._dataSource)) {\n            dataStream = of(this._dataSource);\n        }\n        if (dataStream) {\n            this._dataSubscription = dataStream.pipe(takeUntil(this._onDestroy))\n                .subscribe(function (data) { return _this.renderNodeChanges(data); });\n        }\n        else {\n            throw getTreeNoValidDataSourceError();\n        }\n    };\n    /** Check for changes made in the data and render each change (node added/removed/moved). */\n    CdkTree.prototype.renderNodeChanges = function (data, dataDiffer, viewContainer, parentData) {\n        var _this = this;\n        if (dataDiffer === void 0) { dataDiffer = this._dataDiffer; }\n        if (viewContainer === void 0) { viewContainer = this._nodeOutlet.viewContainer; }\n        var changes = dataDiffer.diff(data);\n        if (!changes) {\n            return;\n        }\n        changes.forEachOperation(function (item, adjustedPreviousIndex, currentIndex) {\n            if (item.previousIndex == null) {\n                _this.insertNode(data[currentIndex], currentIndex, viewContainer, parentData);\n            }\n            else if (currentIndex == null) {\n                viewContainer.remove(adjustedPreviousIndex);\n                _this._levels.delete(item.item);\n            }\n            else {\n                var view = viewContainer.get(adjustedPreviousIndex);\n                viewContainer.move(view, currentIndex);\n            }\n        });\n        this._changeDetectorRef.detectChanges();\n    };\n    /**\n     * Finds the matching node definition that should be used for this node data. If there is only\n     * one node definition, it is returned. Otherwise, find the node definition that has a when\n     * predicate that returns true with the data. If none return true, return the default node\n     * definition.\n     */\n    CdkTree.prototype._getNodeDef = function (data, i) {\n        if (this._nodeDefs.length === 1) {\n            return this._nodeDefs.first;\n        }\n        var nodeDef = this._nodeDefs.find(function (def) { return def.when && def.when(i, data); }) || this._defaultNodeDef;\n        if (!nodeDef) {\n            throw getTreeMissingMatchingNodeDefError();\n        }\n        return nodeDef;\n    };\n    /**\n     * Create the embedded view for the data node template and place it in the correct index location\n     * within the data node view container.\n     */\n    CdkTree.prototype.insertNode = function (nodeData, index, viewContainer, parentData) {\n        var node = this._getNodeDef(nodeData, index);\n        // Node context that will be provided to created embedded view\n        var context = new CdkTreeNodeOutletContext(nodeData);\n        // If the tree is flat tree, then use the `getLevel` function in flat tree control\n        // Otherwise, use the level of parent node.\n        if (this.treeControl.getLevel) {\n            context.level = this.treeControl.getLevel(nodeData);\n        }\n        else if (typeof parentData !== 'undefined' && this._levels.has(parentData)) {\n            context.level = this._levels.get(parentData) + 1;\n        }\n        else {\n            context.level = 0;\n        }\n        this._levels.set(nodeData, context.level);\n        // Use default tree nodeOutlet, or nested node's nodeOutlet\n        var container = viewContainer ? viewContainer : this._nodeOutlet.viewContainer;\n        container.createEmbeddedView(node.template, context, index);\n        // Set the data to just created `CdkTreeNode`.\n        // The `CdkTreeNode` created from `createEmbeddedView` will be saved in static variable\n        //     `mostRecentTreeNode`. We get it from static variable and pass the node data to it.\n        if (CdkTreeNode.mostRecentTreeNode) {\n            CdkTreeNode.mostRecentTreeNode.data = nodeData;\n        }\n    };\n    CdkTree.decorators = [\n        { type: Component, args: [{\n                    selector: 'cdk-tree',\n                    exportAs: 'cdkTree',\n                    template: \"<ng-container cdkTreeNodeOutlet></ng-container>\",\n                    host: {\n                        'class': 'cdk-tree',\n                        'role': 'tree',\n                    },\n                    encapsulation: ViewEncapsulation.None,\n                    // The \"OnPush\" status for the `CdkTree` component is effectively a noop, so we are removing it.\n                    // The view for `CdkTree` consists entirely of templates declared in other views. As they are\n                    // declared elsewhere, they are checked when their declaration points are checked.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default\n                }] }\n    ];\n    /** @nocollapse */\n    CdkTree.ctorParameters = function () { return [\n        { type: IterableDiffers },\n        { type: ChangeDetectorRef }\n    ]; };\n    CdkTree.propDecorators = {\n        dataSource: [{ type: Input }],\n        treeControl: [{ type: Input }],\n        trackBy: [{ type: Input }],\n        _nodeOutlet: [{ type: ViewChild, args: [CdkTreeNodeOutlet, { static: true },] }],\n        _nodeDefs: [{ type: ContentChildren, args: [CdkTreeNodeDef, {\n                        // We need to use `descendants: true`, because Ivy will no longer match\n                        // indirect descendants if it's left as false.\n                        descendants: true\n                    },] }]\n    };\n    return CdkTree;\n}());\n/**\n * Tree node for CdkTree. It contains the data in the tree node.\n */\nvar CdkTreeNode = /** @class */ (function () {\n    function CdkTreeNode(_elementRef, _tree) {\n        this._elementRef = _elementRef;\n        this._tree = _tree;\n        /** Subject that emits when the component has been destroyed. */\n        this._destroyed = new Subject();\n        /** Emits when the node's data has changed. */\n        this._dataChanges = new Subject();\n        /**\n         * The role of the node should be 'group' if it's an internal node,\n         * and 'treeitem' if it's a leaf node.\n         */\n        this.role = 'treeitem';\n        CdkTreeNode.mostRecentTreeNode = this;\n    }\n    Object.defineProperty(CdkTreeNode.prototype, \"data\", {\n        /** The tree node's data. */\n        get: function () { return this._data; },\n        set: function (value) {\n            if (value !== this._data) {\n                this._data = value;\n                this._setRoleFromData();\n                this._dataChanges.next();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkTreeNode.prototype, \"isExpanded\", {\n        get: function () {\n            return this._tree.treeControl.isExpanded(this._data);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkTreeNode.prototype, \"level\", {\n        get: function () {\n            return this._tree.treeControl.getLevel ? this._tree.treeControl.getLevel(this._data) : 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CdkTreeNode.prototype.ngOnDestroy = function () {\n        // If this is the last tree node being destroyed,\n        // clear out the reference to avoid leaking memory.\n        if (CdkTreeNode.mostRecentTreeNode === this) {\n            CdkTreeNode.mostRecentTreeNode = null;\n        }\n        this._dataChanges.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n    };\n    /** Focuses the menu item. Implements for FocusableOption. */\n    CdkTreeNode.prototype.focus = function () {\n        this._elementRef.nativeElement.focus();\n    };\n    CdkTreeNode.prototype._setRoleFromData = function () {\n        var _this = this;\n        if (this._tree.treeControl.isExpandable) {\n            this.role = this._tree.treeControl.isExpandable(this._data) ? 'group' : 'treeitem';\n        }\n        else {\n            if (!this._tree.treeControl.getChildren) {\n                throw getTreeControlFunctionsMissingError();\n            }\n            var childrenNodes = this._tree.treeControl.getChildren(this._data);\n            if (Array.isArray(childrenNodes)) {\n                this._setRoleFromChildren(childrenNodes);\n            }\n            else if (isObservable(childrenNodes)) {\n                childrenNodes.pipe(takeUntil(this._destroyed))\n                    .subscribe(function (children) { return _this._setRoleFromChildren(children); });\n            }\n        }\n    };\n    CdkTreeNode.prototype._setRoleFromChildren = function (children) {\n        this.role = children && children.length ? 'group' : 'treeitem';\n    };\n    /**\n     * The most recently created `CdkTreeNode`. We save it in static variable so we can retrieve it\n     * in `CdkTree` and set the data to it.\n     */\n    CdkTreeNode.mostRecentTreeNode = null;\n    CdkTreeNode.decorators = [\n        { type: Directive, args: [{\n                    selector: 'cdk-tree-node',\n                    exportAs: 'cdkTreeNode',\n                    host: {\n                        '[attr.aria-expanded]': 'isExpanded',\n                        '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n                        '[attr.role]': 'role',\n                        'class': 'cdk-tree-node',\n                    },\n                },] }\n    ];\n    /** @nocollapse */\n    CdkTreeNode.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: CdkTree }\n    ]; };\n    CdkTreeNode.propDecorators = {\n        role: [{ type: Input }]\n    };\n    return CdkTreeNode;\n}());\n\n/**\n * Nested node is a child of `<cdk-tree>`. It works with nested tree.\n * By using `cdk-nested-tree-node` component in tree node template, children of the parent node will\n * be added in the `cdkTreeNodeOutlet` in tree node template.\n * The children of node will be automatically added to `cdkTreeNodeOutlet`.\n */\nvar CdkNestedTreeNode = /** @class */ (function (_super) {\n    __extends(CdkNestedTreeNode, _super);\n    function CdkNestedTreeNode(_elementRef, _tree, _differs) {\n        var _this = _super.call(this, _elementRef, _tree) || this;\n        _this._elementRef = _elementRef;\n        _this._tree = _tree;\n        _this._differs = _differs;\n        return _this;\n    }\n    CdkNestedTreeNode.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        this._dataDiffer = this._differs.find([]).create(this._tree.trackBy);\n        if (!this._tree.treeControl.getChildren) {\n            throw getTreeControlFunctionsMissingError();\n        }\n        var childrenNodes = this._tree.treeControl.getChildren(this.data);\n        if (Array.isArray(childrenNodes)) {\n            this.updateChildrenNodes(childrenNodes);\n        }\n        else if (isObservable(childrenNodes)) {\n            childrenNodes.pipe(takeUntil(this._destroyed))\n                .subscribe(function (result) { return _this.updateChildrenNodes(result); });\n        }\n        this.nodeOutlet.changes.pipe(takeUntil(this._destroyed))\n            .subscribe(function () { return _this.updateChildrenNodes(); });\n    };\n    CdkNestedTreeNode.prototype.ngOnDestroy = function () {\n        this._clear();\n        _super.prototype.ngOnDestroy.call(this);\n    };\n    /** Add children dataNodes to the NodeOutlet */\n    CdkNestedTreeNode.prototype.updateChildrenNodes = function (children) {\n        var outlet = this._getNodeOutlet();\n        if (children) {\n            this._children = children;\n        }\n        if (outlet && this._children) {\n            var viewContainer = outlet.viewContainer;\n            this._tree.renderNodeChanges(this._children, this._dataDiffer, viewContainer, this._data);\n        }\n        else {\n            // Reset the data differ if there's no children nodes displayed\n            this._dataDiffer.diff([]);\n        }\n    };\n    /** Clear the children dataNodes. */\n    CdkNestedTreeNode.prototype._clear = function () {\n        var outlet = this._getNodeOutlet();\n        if (outlet) {\n            outlet.viewContainer.clear();\n            this._dataDiffer.diff([]);\n        }\n    };\n    /** Gets the outlet for the current node. */\n    CdkNestedTreeNode.prototype._getNodeOutlet = function () {\n        var _this = this;\n        var outlets = this.nodeOutlet;\n        // Note that since we use `descendants: true` on the query, we have to ensure\n        // that we don't pick up the outlet of a child node by accident.\n        return outlets && outlets.find(function (outlet) { return !outlet._node || outlet._node === _this; });\n    };\n    CdkNestedTreeNode.decorators = [\n        { type: Directive, args: [{\n                    selector: 'cdk-nested-tree-node',\n                    exportAs: 'cdkNestedTreeNode',\n                    host: {\n                        '[attr.aria-expanded]': 'isExpanded',\n                        '[attr.role]': 'role',\n                        'class': 'cdk-tree-node cdk-nested-tree-node',\n                    },\n                    providers: [\n                        { provide: CdkTreeNode, useExisting: CdkNestedTreeNode },\n                        { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: CdkNestedTreeNode }\n                    ]\n                },] }\n    ];\n    /** @nocollapse */\n    CdkNestedTreeNode.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: CdkTree },\n        { type: IterableDiffers }\n    ]; };\n    CdkNestedTreeNode.propDecorators = {\n        nodeOutlet: [{ type: ContentChildren, args: [CdkTreeNodeOutlet, {\n                        // We need to use `descendants: true`, because Ivy will no longer match\n                        // indirect descendants if it's left as false.\n                        descendants: true\n                    },] }]\n    };\n    return CdkNestedTreeNode;\n}(CdkTreeNode));\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Regex used to split a string on its CSS units. */\nvar cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * Indent for the children tree dataNodes.\n * This directive will add left-padding to the node to show hierarchy.\n */\nvar CdkTreeNodePadding = /** @class */ (function () {\n    function CdkTreeNodePadding(_treeNode, _tree, \n    /**\n     * @deprecated _renderer parameter no longer being used. To be removed.\n     * @breaking-change 11.0.0\n     */\n    _renderer, _element, _dir) {\n        var _this = this;\n        this._treeNode = _treeNode;\n        this._tree = _tree;\n        this._element = _element;\n        this._dir = _dir;\n        /** Subject that emits when the component has been destroyed. */\n        this._destroyed = new Subject();\n        /** CSS units used for the indentation value. */\n        this.indentUnits = 'px';\n        this._indent = 40;\n        this._setPadding();\n        if (_dir) {\n            _dir.change.pipe(takeUntil(this._destroyed)).subscribe(function () { return _this._setPadding(true); });\n        }\n        // In Ivy the indentation binding might be set before the tree node's data has been added,\n        // which means that we'll miss the first render. We have to subscribe to changes in the\n        // data to ensure that everything is up to date.\n        _treeNode._dataChanges.subscribe(function () { return _this._setPadding(); });\n    }\n    Object.defineProperty(CdkTreeNodePadding.prototype, \"level\", {\n        /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n        get: function () { return this._level; },\n        set: function (value) {\n            // Set to null as the fallback value so that _setPadding can fall back to the node level if the\n            // consumer set the directive as `cdkTreeNodePadding=\"\"`. We still want to take this value if\n            // they set 0 explicitly.\n            this._level = coerceNumberProperty(value, null);\n            this._setPadding();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkTreeNodePadding.prototype, \"indent\", {\n        /**\n         * The indent for each level. Can be a number or a CSS string.\n         * Default number 40px from material design menu sub-menu spec.\n         */\n        get: function () { return this._indent; },\n        set: function (indent) {\n            var value = indent;\n            var units = 'px';\n            if (typeof indent === 'string') {\n                var parts = indent.split(cssUnitPattern);\n                value = parts[0];\n                units = parts[1] || units;\n            }\n            this.indentUnits = units;\n            this._indent = coerceNumberProperty(value);\n            this._setPadding();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CdkTreeNodePadding.prototype.ngOnDestroy = function () {\n        this._destroyed.next();\n        this._destroyed.complete();\n    };\n    /** The padding indent value for the tree node. Returns a string with px numbers if not null. */\n    CdkTreeNodePadding.prototype._paddingIndent = function () {\n        var nodeLevel = (this._treeNode.data && this._tree.treeControl.getLevel)\n            ? this._tree.treeControl.getLevel(this._treeNode.data)\n            : null;\n        var level = this._level == null ? nodeLevel : this._level;\n        return typeof level === 'number' ? \"\" + level * this._indent + this.indentUnits : null;\n    };\n    CdkTreeNodePadding.prototype._setPadding = function (forceChange) {\n        if (forceChange === void 0) { forceChange = false; }\n        var padding = this._paddingIndent();\n        if (padding !== this._currentPadding || forceChange) {\n            var element = this._element.nativeElement;\n            var paddingProp = this._dir && this._dir.value === 'rtl' ? 'paddingRight' : 'paddingLeft';\n            var resetProp = paddingProp === 'paddingLeft' ? 'paddingRight' : 'paddingLeft';\n            element.style[paddingProp] = padding || '';\n            element.style[resetProp] = '';\n            this._currentPadding = padding;\n        }\n    };\n    CdkTreeNodePadding.decorators = [\n        { type: Directive, args: [{\n                    selector: '[cdkTreeNodePadding]',\n                },] }\n    ];\n    /** @nocollapse */\n    CdkTreeNodePadding.ctorParameters = function () { return [\n        { type: CdkTreeNode },\n        { type: CdkTree },\n        { type: Renderer2 },\n        { type: ElementRef },\n        { type: Directionality, decorators: [{ type: Optional }] }\n    ]; };\n    CdkTreeNodePadding.propDecorators = {\n        level: [{ type: Input, args: ['cdkTreeNodePadding',] }],\n        indent: [{ type: Input, args: ['cdkTreeNodePaddingIndent',] }]\n    };\n    return CdkTreeNodePadding;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Node toggle to expand/collapse the node.\n */\nvar CdkTreeNodeToggle = /** @class */ (function () {\n    function CdkTreeNodeToggle(_tree, _treeNode) {\n        this._tree = _tree;\n        this._treeNode = _treeNode;\n        this._recursive = false;\n    }\n    Object.defineProperty(CdkTreeNodeToggle.prototype, \"recursive\", {\n        /** Whether expand/collapse the node recursively. */\n        get: function () { return this._recursive; },\n        set: function (value) { this._recursive = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    CdkTreeNodeToggle.prototype._toggle = function (event) {\n        this.recursive\n            ? this._tree.treeControl.toggleDescendants(this._treeNode.data)\n            : this._tree.treeControl.toggle(this._treeNode.data);\n        event.stopPropagation();\n    };\n    CdkTreeNodeToggle.decorators = [\n        { type: Directive, args: [{ selector: '[cdkTreeNodeToggle]' },] }\n    ];\n    /** @nocollapse */\n    CdkTreeNodeToggle.ctorParameters = function () { return [\n        { type: CdkTree },\n        { type: CdkTreeNode }\n    ]; };\n    CdkTreeNodeToggle.propDecorators = {\n        recursive: [{ type: Input, args: ['cdkTreeNodeToggleRecursive',] }],\n        _toggle: [{ type: HostListener, args: ['click', ['$event'],] }]\n    };\n    return CdkTreeNodeToggle;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar EXPORTED_DECLARATIONS = [\n    CdkNestedTreeNode,\n    CdkTreeNodeDef,\n    CdkTreeNodePadding,\n    CdkTreeNodeToggle,\n    CdkTree,\n    CdkTreeNode,\n    CdkTreeNodeOutlet,\n];\nvar CdkTreeModule = /** @class */ (function () {\n    function CdkTreeModule() {\n    }\n    CdkTreeModule.decorators = [\n        { type: NgModule, args: [{\n                    exports: EXPORTED_DECLARATIONS,\n                    declarations: EXPORTED_DECLARATIONS,\n                    providers: [FocusMonitor, CdkTreeNodeDef]\n                },] }\n    ];\n    return CdkTreeModule;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BaseTreeControl, CDK_TREE_NODE_OUTLET_NODE, CdkNestedTreeNode, CdkTree, CdkTreeModule, CdkTreeNode, CdkTreeNodeDef, CdkTreeNodeOutlet, CdkTreeNodeOutletContext, CdkTreeNodePadding, CdkTreeNodeToggle, FlatTreeControl, NestedTreeControl, getTreeControlFunctionsMissingError, getTreeControlMissingError, getTreeMissingMatchingNodeDefError, getTreeMultipleDefaultNodeDefsError, getTreeNoValidDataSourceError };\n//# sourceMappingURL=tree.js.map\n","<label [attr.for]=\"inputId\" class=\"mat-checkbox-layout\" #label>\n  <div class=\"mat-checkbox-inner-container\"\n       [class.mat-checkbox-inner-container-no-side-margin]=\"!checkboxLabel.textContent || !checkboxLabel.textContent.trim()\">\n    <input #input\n           class=\"mat-checkbox-input cdk-visually-hidden\" type=\"checkbox\"\n           [id]=\"inputId\"\n           [required]=\"required\"\n           [checked]=\"checked\"\n           [attr.value]=\"value\"\n           [disabled]=\"disabled\"\n           [attr.name]=\"name\"\n           [tabIndex]=\"tabIndex\"\n           [attr.aria-label]=\"ariaLabel || null\"\n           [attr.aria-labelledby]=\"ariaLabelledby\"\n           [attr.aria-checked]=\"_getAriaChecked()\"\n           (change)=\"_onInteractionEvent($event)\"\n           (click)=\"_onInputClick($event)\">\n    <div matRipple class=\"mat-checkbox-ripple mat-focus-indicator\"\n         [matRippleTrigger]=\"label\"\n         [matRippleDisabled]=\"_isRippleDisabled()\"\n         [matRippleRadius]=\"20\"\n         [matRippleCentered]=\"true\"\n         [matRippleAnimation]=\"{enterDuration: 150}\">\n      <div class=\"mat-ripple-element mat-checkbox-persistent-ripple\"></div>\n    </div>\n    <div class=\"mat-checkbox-frame\"></div>\n    <div class=\"mat-checkbox-background\">\n      <svg version=\"1.1\"\n           focusable=\"false\"\n           class=\"mat-checkbox-checkmark\"\n           viewBox=\"0 0 24 24\"\n           xml:space=\"preserve\">\n        <path class=\"mat-checkbox-checkmark-path\"\n              fill=\"none\"\n              stroke=\"white\"\n              d=\"M4.1,12.7 9,17.6 20.3,6.3\"/>\n      </svg>\n      <!-- Element for rendering the indeterminate state checkbox. -->\n      <div class=\"mat-checkbox-mixedmark\"></div>\n    </div>\n  </div>\n  <span class=\"mat-checkbox-label\" #checkboxLabel (cdkObserveContent)=\"_onLabelTextChange()\">\n    <!-- Add an invisible span so JAWS can read the label -->\n    <span style=\"display:none\">&nbsp;</span>\n    <ng-content></ng-content>\n  </span>\n</label>\n","import { __extends, __spread } from 'tslib';\nimport { CdkTreeNode, CdkTree, CdkTreeNodeDef, CdkNestedTreeNode, CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodePadding, CdkTreeNodeOutlet, CdkTreeNodeToggle, CdkTreeModule } from '@angular/cdk/tree';\nimport { Directive, ElementRef, Attribute, Input, IterableDiffers, ViewContainerRef, Inject, Optional, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DataSource } from '@angular/cdk/collections';\nimport { BehaviorSubject, merge } from 'rxjs';\nimport { take, map } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\nvar MatTreeNode = /** @class */ (function (_super) {\n    __extends(MatTreeNode, _super);\n    function MatTreeNode(_elementRef, _tree, tabIndex) {\n        var _this = _super.call(this, _elementRef, _tree) || this;\n        _this._elementRef = _elementRef;\n        _this._tree = _tree;\n        _this.role = 'treeitem';\n        _this.tabIndex = Number(tabIndex) || 0;\n        return _this;\n    }\n    MatTreeNode.decorators = [\n        { type: Directive, args: [{\n                    selector: 'mat-tree-node',\n                    exportAs: 'matTreeNode',\n                    inputs: ['disabled', 'tabIndex'],\n                    host: {\n                        '[attr.aria-expanded]': 'isExpanded',\n                        '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n                        '[attr.role]': 'role',\n                        'class': 'mat-tree-node'\n                    },\n                    providers: [{ provide: CdkTreeNode, useExisting: MatTreeNode }]\n                },] }\n    ];\n    /** @nocollapse */\n    MatTreeNode.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: CdkTree },\n        { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\n    ]; };\n    MatTreeNode.propDecorators = {\n        role: [{ type: Input }]\n    };\n    return MatTreeNode;\n}(_MatTreeNodeMixinBase));\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\nvar MatTreeNodeDef = /** @class */ (function (_super) {\n    __extends(MatTreeNodeDef, _super);\n    function MatTreeNodeDef() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    MatTreeNodeDef.decorators = [\n        { type: Directive, args: [{\n                    selector: '[matTreeNodeDef]',\n                    inputs: [\n                        'when: matTreeNodeDefWhen'\n                    ],\n                    providers: [{ provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef }]\n                },] }\n    ];\n    MatTreeNodeDef.propDecorators = {\n        data: [{ type: Input, args: ['matTreeNode',] }]\n    };\n    return MatTreeNodeDef;\n}(CdkTreeNodeDef));\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\nvar MatNestedTreeNode = /** @class */ (function (_super) {\n    __extends(MatNestedTreeNode, _super);\n    function MatNestedTreeNode(_elementRef, _tree, _differs, tabIndex) {\n        var _this = _super.call(this, _elementRef, _tree, _differs) || this;\n        _this._elementRef = _elementRef;\n        _this._tree = _tree;\n        _this._differs = _differs;\n        _this._disabled = false;\n        _this.tabIndex = Number(tabIndex) || 0;\n        return _this;\n    }\n    Object.defineProperty(MatNestedTreeNode.prototype, \"disabled\", {\n        /** Whether the node is disabled. */\n        get: function () { return this._disabled; },\n        set: function (value) { this._disabled = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatNestedTreeNode.prototype, \"tabIndex\", {\n        /** Tabindex for the node. */\n        get: function () { return this.disabled ? -1 : this._tabIndex; },\n        set: function (value) {\n            // If the specified tabIndex value is null or undefined, fall back to the default value.\n            this._tabIndex = value != null ? value : 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // This is a workaround for https://github.com/angular/angular/issues/23091\n    // In aot mode, the lifecycle hooks from parent class are not called.\n    // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n    MatNestedTreeNode.prototype.ngAfterContentInit = function () {\n        _super.prototype.ngAfterContentInit.call(this);\n    };\n    MatNestedTreeNode.prototype.ngOnDestroy = function () {\n        _super.prototype.ngOnDestroy.call(this);\n    };\n    MatNestedTreeNode.decorators = [\n        { type: Directive, args: [{\n                    selector: 'mat-nested-tree-node',\n                    exportAs: 'matNestedTreeNode',\n                    host: {\n                        '[attr.aria-expanded]': 'isExpanded',\n                        '[attr.role]': 'role',\n                        'class': 'mat-nested-tree-node',\n                    },\n                    providers: [\n                        { provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode },\n                        { provide: CdkTreeNode, useExisting: MatNestedTreeNode },\n                        { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode }\n                    ]\n                },] }\n    ];\n    /** @nocollapse */\n    MatNestedTreeNode.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: CdkTree },\n        { type: IterableDiffers },\n        { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\n    ]; };\n    MatNestedTreeNode.propDecorators = {\n        node: [{ type: Input, args: ['matNestedTreeNode',] }],\n        disabled: [{ type: Input }],\n        tabIndex: [{ type: Input }]\n    };\n    return MatNestedTreeNode;\n}(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\nvar MatTreeNodePadding = /** @class */ (function (_super) {\n    __extends(MatTreeNodePadding, _super);\n    function MatTreeNodePadding() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    MatTreeNodePadding.decorators = [\n        { type: Directive, args: [{\n                    selector: '[matTreeNodePadding]',\n                    providers: [{ provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding }]\n                },] }\n    ];\n    MatTreeNodePadding.propDecorators = {\n        level: [{ type: Input, args: ['matTreeNodePadding',] }],\n        indent: [{ type: Input, args: ['matTreeNodePaddingIndent',] }]\n    };\n    return MatTreeNodePadding;\n}(CdkTreeNodePadding));\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\nvar MatTreeNodeOutlet = /** @class */ (function () {\n    function MatTreeNodeOutlet(viewContainer, _node) {\n        this.viewContainer = viewContainer;\n        this._node = _node;\n    }\n    MatTreeNodeOutlet.decorators = [\n        { type: Directive, args: [{\n                    selector: '[matTreeNodeOutlet]',\n                    providers: [{\n                            provide: CdkTreeNodeOutlet,\n                            useExisting: MatTreeNodeOutlet\n                        }]\n                },] }\n    ];\n    /** @nocollapse */\n    MatTreeNodeOutlet.ctorParameters = function () { return [\n        { type: ViewContainerRef },\n        { type: undefined, decorators: [{ type: Inject, args: [CDK_TREE_NODE_OUTLET_NODE,] }, { type: Optional }] }\n    ]; };\n    return MatTreeNodeOutlet;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\nvar MatTree = /** @class */ (function (_super) {\n    __extends(MatTree, _super);\n    function MatTree() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    MatTree.decorators = [\n        { type: Component, args: [{\n                    selector: 'mat-tree',\n                    exportAs: 'matTree',\n                    template: \"<ng-container matTreeNodeOutlet></ng-container>\",\n                    host: {\n                        'class': 'mat-tree',\n                        'role': 'tree',\n                    },\n                    encapsulation: ViewEncapsulation.None,\n                    // See note on CdkTree for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    providers: [{ provide: CdkTree, useExisting: MatTree }],\n                    styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;min-height:48px;flex:1;word-wrap:break-word}.mat-nested-tree-node{border-bottom-width:0}\\n\"]\n                }] }\n    ];\n    MatTree.propDecorators = {\n        _nodeOutlet: [{ type: ViewChild, args: [MatTreeNodeOutlet, { static: true },] }]\n    };\n    return MatTree;\n}(CdkTree));\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\nvar MatTreeNodeToggle = /** @class */ (function (_super) {\n    __extends(MatTreeNodeToggle, _super);\n    function MatTreeNodeToggle() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.recursive = false;\n        return _this;\n    }\n    MatTreeNodeToggle.decorators = [\n        { type: Directive, args: [{\n                    selector: '[matTreeNodeToggle]',\n                    providers: [{ provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle }]\n                },] }\n    ];\n    MatTreeNodeToggle.propDecorators = {\n        recursive: [{ type: Input, args: ['matTreeNodeToggleRecursive',] }]\n    };\n    return MatTreeNodeToggle;\n}(CdkTreeNodeToggle));\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar MAT_TREE_DIRECTIVES = [\n    MatNestedTreeNode,\n    MatTreeNodeDef,\n    MatTreeNodePadding,\n    MatTreeNodeToggle,\n    MatTree,\n    MatTreeNode,\n    MatTreeNodeOutlet\n];\nvar MatTreeModule = /** @class */ (function () {\n    function MatTreeModule() {\n    }\n    MatTreeModule.decorators = [\n        { type: NgModule, args: [{\n                    imports: [CdkTreeModule, MatCommonModule],\n                    exports: MAT_TREE_DIRECTIVES,\n                    declarations: MAT_TREE_DIRECTIVES,\n                },] }\n    ];\n    return MatTreeModule;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nvar MatTreeFlattener = /** @class */ (function () {\n    function MatTreeFlattener(transformFunction, getLevel, isExpandable, getChildren) {\n        this.transformFunction = transformFunction;\n        this.getLevel = getLevel;\n        this.isExpandable = isExpandable;\n        this.getChildren = getChildren;\n    }\n    MatTreeFlattener.prototype._flattenNode = function (node, level, resultNodes, parentMap) {\n        var _this = this;\n        var flatNode = this.transformFunction(node, level);\n        resultNodes.push(flatNode);\n        if (this.isExpandable(flatNode)) {\n            var childrenNodes = this.getChildren(node);\n            if (childrenNodes) {\n                if (Array.isArray(childrenNodes)) {\n                    this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n                }\n                else {\n                    childrenNodes.pipe(take(1)).subscribe(function (children) {\n                        _this._flattenChildren(children, level, resultNodes, parentMap);\n                    });\n                }\n            }\n        }\n        return resultNodes;\n    };\n    MatTreeFlattener.prototype._flattenChildren = function (children, level, resultNodes, parentMap) {\n        var _this = this;\n        children.forEach(function (child, index) {\n            var childParentMap = parentMap.slice();\n            childParentMap.push(index != children.length - 1);\n            _this._flattenNode(child, level + 1, resultNodes, childParentMap);\n        });\n    };\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     */\n    MatTreeFlattener.prototype.flattenNodes = function (structuredData) {\n        var _this = this;\n        var resultNodes = [];\n        structuredData.forEach(function (node) { return _this._flattenNode(node, 0, resultNodes, []); });\n        return resultNodes;\n    };\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     */\n    MatTreeFlattener.prototype.expandFlattenedNodes = function (nodes, treeControl) {\n        var _this = this;\n        var results = [];\n        var currentExpand = [];\n        currentExpand[0] = true;\n        nodes.forEach(function (node) {\n            var expand = true;\n            for (var i = 0; i <= _this.getLevel(node); i++) {\n                expand = expand && currentExpand[i];\n            }\n            if (expand) {\n                results.push(node);\n            }\n            if (_this.isExpandable(node)) {\n                currentExpand[_this.getLevel(node) + 1] = treeControl.isExpanded(node);\n            }\n        });\n        return results;\n    };\n    return MatTreeFlattener;\n}());\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nvar MatTreeFlatDataSource = /** @class */ (function (_super) {\n    __extends(MatTreeFlatDataSource, _super);\n    function MatTreeFlatDataSource(_treeControl, _treeFlattener, initialData) {\n        if (initialData === void 0) { initialData = []; }\n        var _this = _super.call(this) || this;\n        _this._treeControl = _treeControl;\n        _this._treeFlattener = _treeFlattener;\n        _this._flattenedData = new BehaviorSubject([]);\n        _this._expandedData = new BehaviorSubject([]);\n        _this._data = new BehaviorSubject(initialData);\n        return _this;\n    }\n    Object.defineProperty(MatTreeFlatDataSource.prototype, \"data\", {\n        get: function () { return this._data.value; },\n        set: function (value) {\n            this._data.next(value);\n            this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\n            this._treeControl.dataNodes = this._flattenedData.value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    MatTreeFlatDataSource.prototype.connect = function (collectionViewer) {\n        var _this = this;\n        var changes = [\n            collectionViewer.viewChange,\n            this._treeControl.expansionModel.changed,\n            this._flattenedData\n        ];\n        return merge.apply(void 0, __spread(changes)).pipe(map(function () {\n            _this._expandedData.next(_this._treeFlattener.expandFlattenedNodes(_this._flattenedData.value, _this._treeControl));\n            return _this._expandedData.value;\n        }));\n    };\n    MatTreeFlatDataSource.prototype.disconnect = function () {\n        // no op\n    };\n    return MatTreeFlatDataSource;\n}(DataSource));\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nvar MatTreeNestedDataSource = /** @class */ (function (_super) {\n    __extends(MatTreeNestedDataSource, _super);\n    function MatTreeNestedDataSource() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._data = new BehaviorSubject([]);\n        return _this;\n    }\n    Object.defineProperty(MatTreeNestedDataSource.prototype, \"data\", {\n        /**\n         * Data for the nested tree\n         */\n        get: function () { return this._data.value; },\n        set: function (value) { this._data.next(value); },\n        enumerable: true,\n        configurable: true\n    });\n    MatTreeNestedDataSource.prototype.connect = function (collectionViewer) {\n        var _this = this;\n        return merge.apply(void 0, __spread([collectionViewer.viewChange, this._data])).pipe(map(function () {\n            return _this.data;\n        }));\n    };\n    MatTreeNestedDataSource.prototype.disconnect = function () {\n        // no op\n    };\n    return MatTreeNestedDataSource;\n}(DataSource));\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatNestedTreeNode, MatTree, MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule, MatTreeNestedDataSource, MatTreeNode, MatTreeNodeDef, MatTreeNodeOutlet, MatTreeNodePadding, MatTreeNodeToggle };\n//# sourceMappingURL=tree.js.map\n","<ng-container matTreeNodeOutlet></ng-container>","<h1 mat-dialog-title>{{data.title}}</h1>\n<mat-dialog-content>\n<p *ngIf=\"data.links?.length === 0 && !data.patternlanguages\">No links found.</p>\n<mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\n    <!-- Leaf node -->\n    <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodePadding>\n        <button mat-icon-button disabled></button>\n        <mat-checkbox class=\"checklist-leaf-node\" [checked]=\"checklistSelection.isSelected(node)\"\n                      (change)=\"todoLeafItemSelectionToggle(node)\"> {{node.item.name}}\n        </mat-checkbox>\n    </mat-tree-node>\n\n    <!-- expandable node -->\n    <mat-tree-node *matTreeNodeDef=\"let node; when: hasChild\" matTreeNodePadding>\n        <button mat-icon-button\n                [attr.aria-label]=\"'toggle ' + node.filename\"\n                (click)=\"loadChildren(node)\"\n                matTreeNodeToggle>\n            <mat-icon class=\"mat-icon-rtl-mirror\">\n                {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\n            </mat-icon>\n        </button>\n        <mat-checkbox class=\"checklist-leaf-node\" [checked]=\"descendantsAllSelected(node)\"\n                      [indeterminate]=\"descendantsPartiallySelected(node)\"\n                      (change)=\"todoItemSelectionToggle(node)\"> {{node.item.name}}\n        </mat-checkbox>\n    </mat-tree-node>\n\n    <mat-tree-node *matTreeNodeDef=\"let node; when: isLoadMore\">\n        No patterns found for this language.\n    </mat-tree-node>\n</mat-tree>\n</mat-dialog-content>\n<mat-dialog-actions>\n    <button mat-button [mat-dialog-close]=\"null\">Close</button>\n    <button mat-button [mat-dialog-close]=\"getPatterns()\">Save\n    </button>\n</mat-dialog-actions>\n","import {Component, Inject} from '@angular/core';\nimport {FlatTreeControl} from '@angular/cdk/tree';\nimport {MAT_DIALOG_DATA} from '@angular/material/dialog';\nimport {MatTreeFlatDataSource, MatTreeFlattener} from '@angular/material/tree';\nimport {BehaviorSubject, forkJoin, Observable} from 'rxjs';\nimport PatternLanguage from '../../core/model/hal/pattern-language.model';\nimport {PatternService} from '../../core/service/pattern.service';\nimport Pattern from '../../core/model/hal/pattern.model';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {PatternRelationDescriptorService} from '../../core/service/pattern-relation-descriptor.service';\nimport {HalLink} from '../../core/model/hal/hal-link.interface';\nimport {DirectedEdgeModel} from '../../core/model/hal/directed-edge.model';\nimport {UndirectedEdgeModel} from '../../core/model/hal/undirected-edge.model';\n\n/** Nested node */\nexport class LoadmoreNode {\n    childrenChange = new BehaviorSubject<LoadmoreNode[]>([]);\n\n    get children(): LoadmoreNode[] {\n        return this.childrenChange.value;\n    }\n\n    constructor(public item: PatternLanguage | Pattern | LinksToOtherPattern,\n                public hasChildren = false,\n                public loadMoreParentItem: string | null = null) {\n    }\n}\n\n/** Flat node with expandable and level information */\nexport class LoazyLoadedFlatNode {\n    constructor(public item: Pattern | PatternLanguage | LinksToOtherPattern,\n                public level = 1,\n                public expandable = false,\n                public loadMoreParentItem: string | null = null) {\n    }\n\n\n}\n\nexport class LinksToOtherPattern {\n    name: string;\n    links?: HalLink[];\n    type: string;\n    edge?: DirectedEdgeModel | UndirectedEdgeModel;\n    id: string;\n    linkedPattern?: HalLink;\n\n    constructor(edge, isDirectedLink: boolean, patternId: string) {\n        let relatedPatternIsSource;\n\n        if (isDirectedLink) {\n            relatedPatternIsSource = edge.targetPatternId === patternId;\n            this.name = relatedPatternIsSource ? edge.sourcePatternName : edge.targetPatternName;\n            this.id = relatedPatternIsSource ? edge.sourcePatternId : edge.targetPatternId;\n            this.linkedPattern = relatedPatternIsSource ? edge._links.sourcePattern : edge._links.targetPattern;\n            this.type = 'directed';\n            this.edge = edge;\n        } else {\n            edge = <UndirectedEdgeModel>edge;\n            relatedPatternIsSource = edge.pattern2Id === patternId;\n            this.name = relatedPatternIsSource ? edge.pattern1Name : edge.pattern2Name;\n            this.id = relatedPatternIsSource ? edge.pattern1Id : edge.pattern2Id;\n            this.linkedPattern = relatedPatternIsSource ? edge._links.pattern[0] : edge._links.pattern[1];\n            this.type = 'undirected';\n            this.edge = edge;\n        }\n\n    }\n\n\n}\n\n\n@Component({\n    selector: 'pp-add-to-view',\n    templateUrl: './add-to-view.component.html',\n    styleUrls: ['./add-to-view.component.scss']\n})\nexport class AddToViewComponent {\n    nodeMap = new Map<string, LoazyLoadedFlatNode>();\n    treeControl: FlatTreeControl<LoazyLoadedFlatNode>;\n    treeFlattener: MatTreeFlattener<LoadmoreNode, LoazyLoadedFlatNode>;\n    // Flat tree data source\n    dataSource: MatTreeFlatDataSource<LoadmoreNode, LoazyLoadedFlatNode>;\n    LOAD_MORE = 'LOAD_MORE';\n    nodes: LoadmoreNode[];\n    isLinkModal = false;\n    patternId: string;\n\n\n    constructor(@Inject(MAT_DIALOG_DATA) public data: { patternlanguages?: PatternLanguage[], links?: LinksToOtherPattern[], title: string, patternId: string },\n                private patternService: PatternService, private patternRelationDescriptorService: PatternRelationDescriptorService) {\n        this.isLinkModal = !!data.patternlanguages;\n        this.treeFlattener = new MatTreeFlattener(this.transformer, this.getLevel,\n            this.isExpandable, this.getChildren);\n\n        this.treeControl = new FlatTreeControl<LoazyLoadedFlatNode>(this.getLevel, this.isExpandable);\n\n        this.dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n\n        this.nodes = this.isLinkModal ? data.patternlanguages.map(it => new LoadmoreNode(it)) : data.links.map(it => new LoadmoreNode(it));\n        this.patternId = data.patternId ? data.patternId : null;\n        this.dataSource.data = this.nodes;\n\n    }\n\n\n    checklistSelection = new SelectionModel<LoazyLoadedFlatNode>(true /* multiple */);\n    getChildren = (node: LoadmoreNode): Observable<LoadmoreNode[]> => node.childrenChange;\n\n    transformer = (node: LoadmoreNode, level: number) => {\n        const existingNode = this.nodeMap.get(node.item.id);\n\n        if (existingNode) {\n            return existingNode;\n        }\n\n        const newNode = new LoazyLoadedFlatNode(node.item, level, node.hasChildren, node.loadMoreParentItem);\n        this.nodeMap.set(node.item.id, newNode);\n        return newNode;\n    };\n\n    getLevel = (node: LoazyLoadedFlatNode) => node.level;\n\n    isExpandable = (node: LoazyLoadedFlatNode) => node.level === 0;\n\n    hasChild = (_: number, _nodeData: LoazyLoadedFlatNode) => _nodeData.level === 0;\n\n\n    isLoadMore = (_: number, _nodeData: LoazyLoadedFlatNode) => _nodeData.item.id === this.LOAD_MORE; // ?\n\n    /** Load more nodes from data source */\n    loadMore(node: LoazyLoadedFlatNode) {\n\n        const treenode: LoadmoreNode = this.nodes.find(it => it.item.id === node.item.id);\n        if (treenode.children.length > 0) {\n            treenode.childrenChange.next(treenode.children);\n            return;\n        }\n        if (node.item['uri']) {\n            this.getPatternsAndAddToTree(<PatternLanguage>node.item, treenode, node);\n\n        } else {\n            this.getRelatedPatternAndAddToTree(<LinksToOtherPattern>node.item, treenode, node);\n        }\n    }\n\n    loadChildren(node: LoazyLoadedFlatNode) {\n        this.loadMore(node);\n    }\n\n    todoLeafItemSelectionToggle(node: any) {\n        this.checklistSelection.toggle(node);\n        this.checkAllParentsSelection(node);\n    }\n\n    /* Checks all the parents when a leaf node is selected/unselected */\n    checkAllParentsSelection(node: LoazyLoadedFlatNode): void {\n        let parent: LoazyLoadedFlatNode | null = this.getParentNode(node);\n        while (parent) {\n            this.checkRootNodeSelection(parent);\n            parent = this.getParentNode(parent);\n        }\n    }\n\n\n    /** Whether part of the descendants are selected */\n    descendantsPartiallySelected(node: LoazyLoadedFlatNode): boolean {\n        const descendants = this.treeControl.getDescendants(node);\n        const result = descendants.some(child => this.checklistSelection.isSelected(child));\n        return result && !this.descendantsAllSelected(node);\n    }\n\n    /** Whether all the descendants of the node are selected. */\n    descendantsAllSelected(node: LoazyLoadedFlatNode): boolean {\n        const descendants = this.treeControl.getDescendants(node);\n        const descAllSelected = descendants.every(child =>\n            this.checklistSelection.isSelected(child)\n        );\n        return descAllSelected && descendants.length > 0;\n    }\n\n    /** Check root node checked state and change it accordingly */\n    checkRootNodeSelection(node: LoazyLoadedFlatNode): void {\n        const nodeSelected = this.checklistSelection.isSelected(node);\n        const descendants = this.treeControl.getDescendants(node);\n        const descAllSelected = descendants.every(child =>\n            this.checklistSelection.isSelected(child)\n        );\n        if (nodeSelected && !descAllSelected) {\n            this.checklistSelection.deselect(node);\n        } else if (!nodeSelected && descAllSelected) {\n            this.checklistSelection.select(node);\n        }\n    }\n\n    /* Get the parent node of a node */\n    getParentNode(node: LoazyLoadedFlatNode): LoazyLoadedFlatNode | null {\n        const currentLevel = node.level;\n\n        if (currentLevel < 1) {\n            return null;\n        }\n\n        const startIndex = this.treeControl.dataNodes.indexOf(node) - 1;\n\n        for (let i = startIndex; i >= 0; i--) {\n            const currentNode = this.treeControl.dataNodes[i];\n\n            if (currentNode.level < currentLevel) {\n                return currentNode;\n            }\n        }\n        return null;\n    }\n\n\n    /** Toggle the to-do item selection. Select/deselect all the descendants node */\n    todoItemSelectionToggle(node: LoazyLoadedFlatNode): void {\n        this.checklistSelection.toggle(node);\n        const descendants = this.treeControl.getDescendants(node);\n        this.checklistSelection.isSelected(node)\n            ? this.checklistSelection.select(...descendants)\n            : this.checklistSelection.deselect(...descendants);\n\n        // if a pattern language is selected that hasn't been loaded, load the children\n        if (this.checklistSelection.isSelected(node) && descendants.length === 0) {\n            this.loadMore(node);\n        }\n\n        // Force update for the parent\n        descendants.every(child =>\n            this.checklistSelection.isSelected(child)\n        );\n        this.checkAllParentsSelection(node);\n    }\n\n    getPatterns() {\n        return this.checklistSelection.selected.filter((node) => node.level === 1);\n    }\n\n    private updateTree(node, treenode, childnodes) {\n        treenode.childrenChange.next(childnodes);\n        this.dataSource.data = this.nodes;\n        const descendants = this.treeControl.getDescendants(node);\n        if (this.checklistSelection.isSelected(node)) {\n            this.checklistSelection.select(...descendants);\n        }\n    }\n\n    private getPatternsAndAddToTree(item: PatternLanguage, treenode, node) {\n        this.patternService.getPatternsByUrl(item._links.patterns.href).subscribe((patterns) => {\n            const dummy = {id: this.LOAD_MORE, name: '', uri: '', content: null, renderedContent: null, _links: null, patternLanguageId: '', patternLanguageName: ''};\n            const childnodes = patterns.length > 0 ? patterns.map(it => new LoadmoreNode(it)) : [new LoadmoreNode(dummy)];\n\n            this.updateTree(node, treenode, childnodes);\n\n        });\n    }\n\n    private getRelatedPatternAndAddToTree(item: LinksToOtherPattern, treenode: LoadmoreNode, node: LoazyLoadedFlatNode) {\n        const edgesObservables = node.item['links'].map(link => item.type === 'directed' ?\n            this.patternRelationDescriptorService.getDirectedEdgeByUrl(link.href) :\n            this.patternRelationDescriptorService.getUndirectedEdgeByUrl(link.href));\n        // @ts-ignore\n        forkJoin(...edgesObservables).subscribe((edges) => {\n            const childnodes = edges.map((edge: DirectedEdgeModel | UndirectedEdgeModel) =>\n                new LoadmoreNode(new LinksToOtherPattern(edge, item.type === 'directed', this.patternId)));\n            this.updateTree(node, treenode, childnodes);\n        });\n    }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { PatternViewManagementComponent } from './pattern-view-management/pattern-view-management.component';\nimport { CoreModule } from '../core/core.module';\nimport { PatternViewRendererComponent } from './pattern-view-renderer/pattern-view-renderer.component';\nimport { AddToViewComponent } from './add-to-view/add-to-view.component';\nimport { MatBadgeModule } from '@angular/material/badge';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTreeModule } from '@angular/material/tree';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst PATTERN_VIEW_MANAGMENT_ROUTE: Routes = [\n    // {\n    //     path: 'patternviews',\n    //     pathMatch: 'prefix',\n    //     children: [\n            {\n                path: '',\n                component: PatternViewManagementComponent\n            },\n            {\n                path: ':patternViewUri',\n                component: PatternViewRendererComponent\n            },\n    //     ]\n    // }\n];\n\n@NgModule({\n    declarations: [\n        PatternViewManagementComponent,\n        PatternViewRendererComponent,\n        AddToViewComponent],\n    imports: [\n        CommonModule,\n        MatCardModule,\n        MatBadgeModule,\n        CoreModule,\n        MatToolbarModule,\n        MatDialogModule,\n        MatButtonModule,\n        MatTreeModule,\n        MatIconModule,\n        MatCheckboxModule,\n        RouterModule.forChild(PATTERN_VIEW_MANAGMENT_ROUTE),\n    ],\n    entryComponents: [\n        AddToViewComponent\n    ]\n})\nexport class PatternViewManagementModule {\n}\n","<pp-action-button-bar [goBackButton]=\"false\" [addButtonText]=\"'Add View'\"\n                      (addClicked)=\"createView()\"></pp-action-button-bar>\n<div style=\"display: flex; flex-wrap: wrap; padding: 0.25em;\">\n    <mat-card class=\"card box\"\n              *ngFor=\"let entity of patternViewResponse?._embedded?.patternViews\"\n              (click)=\"navigate(entity)\"\n    >\n        <span>{{entity.name}}</span>\n    </mat-card>\n\n</div>\n","import {Component, NgZone, OnInit} from '@angular/core';\nimport {PatternViewService} from '../../core/service/pattern-view.service';\nimport {PatternView} from '../../core/model/hal/pattern-view.model';\nimport {MatDialog} from '@angular/material/dialog';\nimport {CreateEditPatternLanguageComponent} from '../../core/component/create-edit-pattern-language/create-edit-pattern-language.component';\nimport {DialogPatternLanguageResult} from '../../pattern-language-management/data/DialogPatternLanguageResult.interface';\nimport {PatternLanguageService} from '../../core/service/pattern-language.service';\nimport PatternLanguage from '../../core/model/hal/pattern-language.model';\nimport {switchMap, tap} from 'rxjs/operators';\nimport {Observable} from 'rxjs';\nimport {PatternViewResponse} from '../../core/model/hal/pattern-view-response.interface';\nimport {ToasterService} from 'angular2-toaster';\nimport {UriConverter} from '../../core/util/uri-converter';\nimport UriEntity from '../../core/model/hal/uri-entity.model';\nimport {ActivatedRoute, Router} from '@angular/router';\n\n@Component({\n    selector: 'pp-solution-language-management',\n    templateUrl: './pattern-view-management.component.html',\n    styleUrls: ['./pattern-view-management.component.scss']\n})\nexport class PatternViewManagementComponent implements OnInit {\n    public patternViewResponse;\n    private patternLanguages: PatternLanguage[];\n\n    constructor(private patternViewService: PatternViewService, private dialog: MatDialog, private patternLanguageService: PatternLanguageService,\n                private toastService: ToasterService, private activatedRoute: ActivatedRoute, private router: Router, private zone: NgZone) {\n    }\n\n    ngOnInit() {\n\n        this.getData().subscribe();\n\n    }\n\n    private getData(): Observable<PatternViewResponse> {\n        return this.patternViewService.getPatternViews().pipe(tap((views) => {\n            this.patternViewResponse = views;\n        }));\n\n\n    }\n\n    navigate(view: UriEntity): void {\n        this.zone.run(() => {\n            this.router.navigate([UriConverter.doubleEncodeUri(view.uri)], {relativeTo: this.activatedRoute});\n        });\n    }\n\n    createView() {\n        const dialogRef = this.dialog.open(CreateEditPatternLanguageComponent, {data: {isPatternLanguageCreation: false}});\n        let view;\n        // Save PatternLanguage when user presses save\n        (<CreateEditPatternLanguageComponent>dialogRef.componentInstance)\n            .saveClicked.pipe(\n            tap((result: DialogPatternLanguageResult) => {\n                view = <PatternView>result.dialogResult;\n            }),\n            switchMap(() => this.patternViewService.savePatternView(this.patternViewResponse._links.patternViews.href, view)),\n            switchMap(() => this.getData())\n        ).subscribe(res => {\n            if (res) {\n                this.toastService.pop('success', 'Created View');\n            }\n        });\n    }\n\n}\n","<pp-action-button-bar [addButtonText]=\"'Add patterns'\" [secondAddButton]=\"true\"\n                      [secondAddButtonText]=\"'Create new Link'\" [displayText]=\"displayText\"\n                      (addClicked)=\"addPatternToView()\" (add2Clicked)=\"addLink()\" [firstAddButton]=\"!graphVisible\">\n    <pp-toggle-renderer [graphVisible]=\"graphVisible\" (toggledRenderer)=\"changeRenderer($event)\"></pp-toggle-renderer>\n    <button class=\"action-button-with-margin\" (click)=\"reloadGraph()\" *ngIf=\"graphVisible\"\n            color=\"accent\" mat-raised-button>\n        <i class=\"material-icons\">autorenew</i> Reformat\n    </button>\n</pp-action-button-bar>\n\n<div class=\"container\" *ngIf=\"!isLoading && !graphVisible\">\n\n    <mat-card class=\"pattern-card\" *ngFor=\"let pattern of this.patterns\">\n        <mat-card-header>\n            <mat-card-title>{{pattern?.name}}</mat-card-title>\n            <mat-card-subtitle>{{pattern.patternLanguageName}}\n\n\n            </mat-card-subtitle>\n\n        </mat-card-header>\n\n        <mat-card-content class=\"card-content-style\">\n\n            <div class=\"badge-container\" (click)=\"showIngoingEdges(pattern._links.ingoingDirectedEdges)\">\n                <button mat-button class=\"edge-button\">\n                    <mat-icon> trending_flat\n                    </mat-icon>\n                    <span class=\"badge-span\" matBadgeOverlap=\"false\"\n                          [matBadge]=\"getLinkCount(pattern._links.ingoingDirectedEdges)\"\n                    >\n                    </span>\n                </button>\n            </div>\n\n            <div class=\"badge-container\" (click)=\"showOutgoingEdges(pattern._links.outgoingDirectedEdges)\">\n                <button mat-button class=\"edge-button\">\n                    <mat-icon class=\"flip\"> trending_flat\n                    </mat-icon>\n                    <span class=\"badge-span\" matBadgeOverlap=\"false\"\n                          [matBadge]=\"getLinkCount(pattern._links.outgoingDirectedEdges)\"\n                    >\n                </span>\n                </button>\n            </div>\n            <div class=\"badge-container\" (click)=\"showUndirectedEdges(pattern._links.undirectedEdges)\">\n                <button mat-button class=\"edge-button\">\n                    <mat-icon>compare_arrows</mat-icon>\n                    <span class=\"badge-span\" [matBadge]=\"getLinkCount(pattern._links.undirectedEdges)\"\n                          matBadgeOverlap=\"false\"\n                    >\n                </span>\n                </button>\n            </div>\n        </mat-card-content>\n        <mat-card-actions\n        >\n            <button mat-button (click)=\"addLinks(pattern)\">Add Links (incl. Pattern)\n            </button>\n        </mat-card-actions>\n    </mat-card>\n</div>\n\n<pp-graph-display *ngIf=\"!isLoading && graphVisible\"\n                  [data]=\"{\n                patterns: this.patterns, edges: this.patternLinks,\n                patternLanguage: null, patternView: this.patternViewResponse,\n                patternLanguages: this.patternLanguages\n            }\"\n                  (addedEdge)=\"addedEdgeInGraphView($event)\" [showPatternLanguageName]=\"true\"></pp-graph-display>\n\n\n","import {AfterViewInit, ChangeDetectorRef, Component, OnInit, ViewChild} from '@angular/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {AddToViewComponent, LinksToOtherPattern, LoazyLoadedFlatNode} from '../add-to-view/add-to-view.component';\nimport {PatternLanguageService} from '../../core/service/pattern-language.service';\nimport {EMPTY, forkJoin, Observable} from 'rxjs';\nimport {switchMap, tap} from 'rxjs/operators';\nimport {ToasterService} from 'angular2-toaster';\nimport {PatternViewService} from '../../core/service/pattern-view.service';\nimport Pattern from '../../core/model/hal/pattern.model';\nimport {PatternView} from '../../core/model/hal/pattern-view.model';\nimport {UriConverter} from '../../core/util/uri-converter';\nimport {ActivatedRoute} from '@angular/router';\nimport {PatternService} from '../../core/service/pattern.service';\nimport {CreatePatternRelationComponent} from '../../core/component/create-pattern-relation/create-pattern-relation.component';\nimport {DirectedEdgeModel} from '../../core/model/hal/directed-edge.model';\nimport {HalLink} from '../../core/model/hal/hal-link.interface';\nimport {AddDirectedEdgeToViewRequest} from '../../core/model/hal/add-directed-edge-to-view-request';\nimport {AddUndirectedEdgeToViewRequest} from '../../core/model/hal/add-undirected-edge-to-view-request';\nimport {UndirectedEdgeModel} from '../../core/model/hal/undirected-edge.model';\nimport PatternLanguageModel from '../../core/model/hal/pattern-language-model.model';\nimport {Embedded} from '../../core/model/hal/embedded';\nimport {UndirectedEdesResponse} from '../../core/model/hal/undirected-edes-response.interface';\nimport {DirectedEdesResponse} from '../../core/model/hal/directed-edes-response.interface';\nimport {GraphDisplayComponent} from '../../core/component/graph-display/graph-display.component';\nimport {DeletePatternRelationComponent} from '../../core/component/delete-pattern-relation/delete-pattern-relation.component';\nimport {PatternRelationDescriptorService} from '../../core/service/pattern-relation-descriptor.service';\n\n@Component({\n    selector: 'pp-pattern-view-renderer',\n    templateUrl: './pattern-view-renderer.component.html',\n    styleUrls: ['./pattern-view-renderer.component.scss']\n})\nexport class PatternViewRendererComponent implements OnInit, AfterViewInit {\n\n    patternViewResponse: PatternView;\n    patterns: Array<Pattern> = [];\n    displayText: string;\n    isLoading = true;\n    graphVisible = false;\n    patternLinks: Array<DirectedEdgeModel | UndirectedEdgeModel> = [];\n    @ViewChild(GraphDisplayComponent, {static: false}) graphDisplayComponent: GraphDisplayComponent;\n    private patternLanguages: Array<PatternLanguageModel>;\n    private patternViewUri: string;\n    private directedPatternRelations: DirectedEdgeModel[];\n    private undirectedPatternRelations: UndirectedEdgeModel[];\n\n    constructor(private matDialog: MatDialog, private patternLanguageService: PatternLanguageService, private patternViewService: PatternViewService,\n                private patternService: PatternService, private toasterService: ToasterService, private cdr: ChangeDetectorRef,\n                private activatedRoute: ActivatedRoute, private patternRLDescriptorService: PatternRelationDescriptorService) {\n    }\n\n    ngOnInit() {\n\n\n    }\n\n    ngAfterViewInit(): void {\n        this.patternViewUri = UriConverter.doubleDecodeUri(this.activatedRoute.snapshot.paramMap.get('patternViewUri'));\n\n        this.getData().pipe(\n            switchMap(() => {\n                return this.getLinks();\n            })\n        ).subscribe(() => {\n                this.isLoading = false;\n                this.displayText = this.patternViewResponse.name;\n            },\n            (error => this.toasterService.pop('error', 'Could not load data')));\n    }\n\n    addPatternToView() {\n        const dialogRef = this.matDialog.open(AddToViewComponent, {\n            data: {patternlanguages: this.patternLanguages, title: 'Add patterns to View'}\n        });\n        dialogRef.afterClosed().pipe(\n            switchMap((res: LoazyLoadedFlatNode[]) => res ?\n                this.patternViewService.addPatterns(this.patternViewResponse._links.patterns.href, this.mapDialogResultToPatterns(res))\n                : EMPTY),\n            switchMap(result => result ? this.getCurrentPatternViewAndPatterns() : EMPTY)).subscribe((res) => {\n            if (res) {\n                this.toasterService.pop('success', 'Data added');\n                this.cdr.detectChanges();\n            }\n        });\n    }\n\n    addLinks(pattern: Pattern) {\n        const dialogRef = this.matDialog.open(AddToViewComponent,\n            {data: {links: this.mapPatternLinksToTreeNode(pattern), title: 'Add linked Patterns', patternId: pattern.id}});\n        this.subscribeToLinkDialogResult(dialogRef);\n    }\n\n    addLink() {\n        const dialogRef = this.matDialog.open(CreatePatternRelationComponent, {data: {patterns: this.patterns, patternview: this.patternViewResponse}});\n        dialogRef.afterClosed().pipe(\n            switchMap((edge) => {\n                return edge ? this.createLink(edge) : EMPTY;\n            })).subscribe((res) => {\n            if (res) {\n                this.toasterService.pop('success', 'Relation added');\n            }\n        });\n    }\n\n    detectChanges() {\n        this.cdr.detectChanges();\n        console.log('detected');\n    }\n\n    getLinkCount(directedEdges: HalLink[] | HalLink) {\n        if (!directedEdges) {\n            return 0;\n        }\n        return Array.isArray(directedEdges) ? directedEdges.length : 1;\n    }\n\n    showUndirectedEdges(undirectedEdges: HalLink[]) {\n        if (undirectedEdges) {\n            const dialogRef = this.matDialog.open(DeletePatternRelationComponent, {\n                data: {edges: undirectedEdges, type: 'undirected'},\n                width: '600px',\n                panelClass: 'delete-relation-dialog'\n            });\n            dialogRef.afterClosed().subscribe(() => {\n                // reload patterns since ng for pattern loop doesnt get updated else\n                this.getData().subscribe(\n                    () => {\n                        this.getLinks();\n                    }\n                );\n            });\n        }\n    }\n\n    showIngoingEdges(ingoingEdges: HalLink[]) {\n        if (ingoingEdges) {\n            const dialogRef = this.matDialog.open(DeletePatternRelationComponent, {\n                data: {edges: ingoingEdges, type: 'ingoing'},\n                width: '600px',\n                panelClass: 'delete-relation-dialog'\n            });\n            dialogRef.afterClosed().subscribe(() => {\n                // reload patterns since ng for pattern loop doesnt get updated else\n                this.getData().subscribe(\n                    () => {\n                        this.getLinks();\n                    }\n                );\n            });\n        }\n    }\n\n    showOutgoingEdges(outgoingEdges: HalLink[]) {\n        if (outgoingEdges) {\n            const dialogRef = this.matDialog.open(DeletePatternRelationComponent, {\n                data: {edges: outgoingEdges, type: 'outgoing'},\n                width: '600px',\n                panelClass: 'delete-relation-dialog'\n            });\n            dialogRef.afterClosed().subscribe(() => {\n                // reload patterns since ng for pattern loop doesnt get updated else\n                this.getData().subscribe(\n                    () => {\n                        this.getLinks();\n                    }\n                );\n            });\n        }\n    }\n\n    changeRenderer(isGraphVisible: any) {\n        this.graphVisible = isGraphVisible;\n    }\n\n    addedEdgeInGraphView(edge: any) {\n        if (edge) {\n            this.createLink(edge).subscribe(() => {\n                this.toasterService.pop('success', 'Link added');\n                this.cdr.detectChanges();\n            });\n        }\n    }\n\n    reloadGraph() {\n        this.graphDisplayComponent.reformatGraph();\n    }\n\n    private getDirectedEdges(): Observable<Embedded<DirectedEdesResponse>> {\n        if (!this.patternViewResponse) {\n            return EMPTY;\n        }\n        return this.patternViewService.getDirectedEdges(this.patternViewResponse).pipe(\n            tap((edges) => {\n                this.directedPatternRelations = edges._embedded ? edges._embedded.directedEdgeModels : [];\n            }));\n    }\n\n    private getUndirectedEdges(): Observable<Embedded<UndirectedEdesResponse>> {\n        if (!this.patternViewResponse) {\n            return EMPTY;\n        }\n        return this.patternViewService.getUndirectedEdges(this.patternViewResponse).pipe(\n            tap((edges) => {\n                this.undirectedPatternRelations = edges._embedded ? edges._embedded.undirectedEdgeModels : [];\n            }));\n    }\n\n    private createLink(edge): Observable<any> {\n        const url = edge instanceof DirectedEdgeModel ? this.patternViewResponse._links.directedEdges.href :\n            this.patternViewResponse._links.undirectedEdges.href;\n        if (!edge || !url) {\n            return EMPTY;\n        }\n        return this.patternViewService.createLink(url, edge instanceof DirectedEdgeModel ?\n            new AddDirectedEdgeToViewRequest(<DirectedEdgeModel>edge) :\n            new AddUndirectedEdgeToViewRequest(<UndirectedEdgeModel>edge)\n        ).pipe(\n            tap((res) => res ? this.getEdgeByUrl(edge, res) : EMPTY));\n    }\n\n    private getEdgeByUrl(edge: DirectedEdgeModel | UndirectedEdgeModel, res: any): void {\n        const getURL = res.url + '/' + res.body.id;\n        this.patternRLDescriptorService.getEdgeByUrl(getURL, edge)\n            .subscribe(\n                edgeResult => {\n                    edge instanceof DirectedEdgeModel ? this.addDirectedEdgeToPattern(edgeResult as DirectedEdgeModel)\n                        : this.addUndirectedEdgeToPattern(edgeResult as UndirectedEdgeModel);\n                    this.patternLinks.push(edgeResult);\n                }\n            );\n    }\n\n    private addUndirectedEdgeToPattern(edge: UndirectedEdgeModel): void {\n        const pattern1 = this.patterns.find(x => x.id === edge.pattern1Id);\n        if (!pattern1._links.undirectedEdges) {\n            pattern1._links.undirectedEdges = edge._links.self;\n        } else if (!Array.isArray(pattern1._links.undirectedEdges)) {\n            pattern1._links.undirectedEdges = [pattern1._links.undirectedEdges, edge._links.self];\n        } else {\n            pattern1._links.undirectedEdges.push(edge._links.self);\n        }\n\n        const pattern2 = this.patterns.find(x => x.id === edge.pattern2Id);\n        if (!pattern2._links.undirectedEdges) {\n            pattern2._links.undirectedEdges = edge._links.self;\n            return;\n        } else if (!Array.isArray(pattern2._links.undirectedEdges)) {\n            pattern2._links.undirectedEdges = <HalLink[]>[pattern2._links.undirectedEdges, edge._links.self];\n        } else {\n            pattern2._links.undirectedEdges.push(edge._links.self);\n        }\n    }\n\n    private addDirectedEdgeToPattern(edge: DirectedEdgeModel): void {\n        const srcPattern = this.patterns.find(x => x.id === edge.sourcePatternId);\n        if (!srcPattern._links.outgoingDirectedEdges) {\n            srcPattern._links.outgoingDirectedEdges = edge._links.self;\n        } else if (!Array.isArray(srcPattern._links.outgoingDirectedEdges)) {\n            srcPattern._links.outgoingDirectedEdges = [srcPattern._links.outgoingDirectedEdges, edge._links.self];\n        } else {\n            srcPattern._links.outgoingDirectedEdges.push(edge._links.self);\n        }\n\n        const targetPattern = this.patterns.find(x => x.id === edge.targetPatternId);\n        if (!targetPattern._links.ingoingDirectedEdges) {\n            targetPattern._links.ingoingDirectedEdges = edge._links.self;\n            return;\n        } else if (!Array.isArray(targetPattern._links.ingoingDirectedEdges)) {\n            targetPattern._links.ingoingDirectedEdges = [targetPattern._links.ingoingDirectedEdges, edge._links.self];\n        } else {\n            targetPattern._links.ingoingDirectedEdges.push(edge._links.self);\n        }\n    }\n\n    private getPatternLanguages(): Observable<Array<PatternLanguageModel>> {\n        return this.patternLanguageService.getPatternLanguages()\n            .pipe(\n                tap(patternlanguages => this.patternLanguages = patternlanguages)\n            );\n    }\n\n    private getCurrentPatternViewAndPatterns(): Observable<Pattern[]> {\n        return this.patternViewService.getPatternViewByUri(this.patternViewUri).pipe(\n            tap(patternViewResponse => {\n                this.patternViewResponse = patternViewResponse;\n            }),\n            switchMap((patternViewResponse: PatternView) => this.patternService.getPatternsByUrl(patternViewResponse._links.patterns.href)),\n            tap(patterns => {\n                this.patterns = patterns;\n            }));\n    }\n\n    private getData(): Observable<any> {\n        const $getPatternLanguages = this.getPatternLanguages();\n        const $getCurrentPatternView = this.getCurrentPatternViewAndPatterns();\n        return forkJoin([$getPatternLanguages, $getCurrentPatternView]); // , $getDirectedEdges]);\n    }\n\n    private getLinks(): Observable<any> {\n        const $getUndirectedEdges = this.getUndirectedEdges();\n        const $getDirectedEdges = this.getDirectedEdges();\n        return forkJoin([$getUndirectedEdges, $getDirectedEdges]).pipe(tap(() => {\n            this.patternLinks = [];\n            this.patternLinks.push(...this.directedPatternRelations);\n            this.patternLinks.push(...this.undirectedPatternRelations);\n        }));\n    }\n\n    private mapDialogResultToPatterns(res: LoazyLoadedFlatNode[]): Pattern[] {\n        if (!res) {\n            return [];\n        }\n        const patternsToAdd = res.map((patternNode) => <Pattern>{\n            content: null,\n            id: patternNode.item.id,\n            name: patternNode.item.name,\n            _links: null\n        });\n        const patternIdsOfView = this.patterns.map(it => it.id);\n        // only add patterns that are not already in the view:\n        return patternsToAdd.filter(pattern => !patternIdsOfView.includes(pattern.id));\n    }\n\n    private subscribeToLinkDialogResult(dialogRef: MatDialogRef<AddToViewComponent, any>) {\n        let nodesToAdd;\n        dialogRef.afterClosed().pipe(\n            tap(res => {\n                nodesToAdd = res;\n                console.log(res);\n            }),\n            switchMap((res) => {\n                return forkJoin([this.patternViewService.addPatterns(this.patternViewResponse._links.patterns.href, this.mapDialogResultToPatterns(res)),\n                    this.patternViewService.addLinks(this.patternViewResponse, res && Array.isArray(res) ? res.map(it => it.item) : [])]);\n            }),\n            switchMap(result => result ? this.getCurrentPatternViewAndPatterns() : EMPTY)\n        ).subscribe((res) => {\n            if (res) {\n                this.toasterService.pop('success', 'Data added');\n                this.cdr.detectChanges();\n            }\n        });\n    }\n\n    private mapPatternLinksToTreeNode(pattern: Pattern): LinksToOtherPattern[] {\n        const types: LinksToOtherPattern[] = [];\n        const possibleEdgeTypes = [\n            {link: pattern._links.ingoingDirectedEdgesFromPatternLanguage, type: 'directed', displayName: 'Ingoing directed edges'},\n            {link: pattern._links.outgoingDirectedEdgesFromPatternLanguage, type: 'directed', displayName: 'Outgoing directed edges'},\n            {link: pattern._links.undirectedEdgesFromPatternLanguage, type: 'undirected', displayName: 'Undirected edges'}\n        ];\n        possibleEdgeTypes.forEach((edgeType: { link: HalLink | HalLink[], displayName: string, type: string }, index) => {\n            if (edgeType.link) {\n                types.push({\n                    name: edgeType.displayName, links: Array.isArray(edgeType.link) ? edgeType.link : [edgeType.link], id: index.toString(),\n                    type: edgeType.type\n                });\n            }\n        });\n        return types;\n    }\n}\n"],"sourceRoot":"webpack:///"}