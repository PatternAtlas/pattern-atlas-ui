{"version":3,"sources":["./node_modules/@angular/material/fesm5/chips.js","./node_modules/@angular/material/fesm5/radio.js","./src/app/core/directives/emit-event-on-keyup.directive.ts","./src/app/core/service/validation.service.ts","./src/app/graph/graph.module.ts","./src/app/pattern-language-management/create-pattern/create-pattern.component.html","./src/app/pattern-language-management/create-pattern/create-pattern.component.ts","./src/app/pattern-language-management/pattern-container/pattern-container.component.html","./src/app/pattern-language-management/pattern-container/pattern-container.component.ts","./src/app/pattern-language-management/pattern-container/pattern-container.directive.ts","./src/app/pattern-language-management/pattern-language-container/pattern-language-container.component.html","./src/app/pattern-language-management/pattern-language-container/pattern-language-container.component.ts","./src/app/pattern-language-management/pattern-language-container/pattern-language-container.directive.ts","./src/app/pattern-language-management/pattern-language-management.module.ts","./src/app/pattern-language-management/pattern-language-management/pattern-language-management.component.html","./src/app/pattern-language-management/pattern-language-management/pattern-language-management.component.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwG;AACqK;AACxF;AACzI;AACD;AACmB;AACb;AACX;AACsB;AACiB;AACzB;AACD;AACO;AACa;AACJ;;AAEnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,qBAAqB;AAC1D;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,wBAAwB,4EAAa,CAAC,yEAAU,CAAC,iFAAkB,CAAC,4EAAa;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA,2BAA2B;AAC3B,iBAAiB;AACjB;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA,2BAA2B;AAC3B,iBAAiB;AACjB;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,4CAAO;AACpC;AACA,4BAA4B,4CAAO;AACnC;AACA,oCAAoC,0DAAY;AAChD;AACA,8BAA8B,0DAAY;AAC1C;AACA,4BAA4B,0DAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,qEAAc;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,0BAA0B,uBAAuB,EAAE;AACnD;AACA,+BAA+B,mFAAqB;AACpD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,+BAA+B,qBAAqB,EAAE;AACtD;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,oDAAoD,EAAE;AAChF;AACA,+BAA+B,mFAAqB;AACpD,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,0BAA0B,wBAAwB,EAAE;AACpD;AACA,8BAA8B,mFAAqB;AACnD,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,aAAa;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,qBAAqB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,aAAa;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,aAAa;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,4DAAM;AACvB,iBAAiB,+DAAS;AAC1B;AACA;AACA;AACA;AACA;AACA,iBAAiB,2DAAK;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,2DAAI;AACtB;AACA;AACA;AACA,oCAAoC,cAAc;AAClD,aAAa;AACb,SAAS;AACT;AACA;AACA,qCAAqC,qBAAqB;AAC1D;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA,0CAA0C;AAC1C,SAAS,OAAO,wDAAU,EAAE;AAC5B,SAAS,OAAO,oDAAM,EAAE;AACxB,SAAS,OAAO,8DAAQ,EAAE;AAC1B,SAAS,gCAAgC,OAAO,sDAAQ,EAAE,GAAG,OAAO,oDAAM,SAAS,gFAAyB,IAAI,GAAG;AACnH,SAAS,6BAA6B,OAAO,sDAAQ,EAAE,GAAG,OAAO,oDAAM,SAAS,0FAAqB,IAAI,GAAG;AAC5G,SAAS,OAAO,+DAAiB,EAAE;AACnC,SAAS,6BAA6B,OAAO,uDAAS,uBAAuB,GAAG;AAChF,SAAS,gCAAgC,OAAO,sDAAQ,EAAE,GAAG,OAAO,oDAAM,SAAS,wDAAQ,IAAI;AAC/F,MAAM;AACN;AACA,kBAAkB,OAAO,0DAAY,0BAA0B;AAC/D,wBAAwB,OAAO,0DAAY,gCAAgC;AAC3E,sBAAsB,OAAO,0DAAY,SAAS,gEAAU,cAAc,sBAAsB,EAAE,KAAK;AACvG,oBAAoB,OAAO,mDAAK,EAAE;AAClC,iBAAiB,OAAO,mDAAK,EAAE;AAC/B,sBAAsB,OAAO,mDAAK,EAAE;AACpC,qBAAqB,OAAO,mDAAK,EAAE;AACnC,2BAA2B,OAAO,oDAAM,EAAE;AAC1C,qBAAqB,OAAO,oDAAM,EAAE;AACpC,mBAAmB,OAAO,oDAAM,EAAE;AAClC;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,gDAAgD;AAChD,SAAS,gBAAgB;AACzB,SAAS,OAAO,wDAAU;AAC1B,MAAM;AACN;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,4DAAc;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,4BAA4B,8EAAe;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,4CAAO;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA,uCAAuC;AACvC;AACA,gDAAgD,kBAAkB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,0DAAY;AACvC;AACA;AACA;AACA;AACA;AACA,gCAAgC,0DAAY;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,0BAA0B,sCAAsC,EAAE;AAClE;AACA;AACA,KAAK;AACL;AACA;AACA,0BAA0B,uBAAuB,EAAE;AACnD;AACA,6BAA6B,mFAAqB;AAClD;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,0BAA0B,EAAE;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,0BAA0B,oBAAoB,EAAE;AAChD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,0BAA0B,uBAAuB,EAAE;AACnD;AACA,6BAA6B,mFAAqB;AAClD;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,0BAA0B,oCAAoC,EAAE;AAChE;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,0BAA0B,oEAAoE,EAAE;AAChG;AACA,6BAA6B,mFAAqB;AAClD;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,0BAA0B,yBAAyB,EAAE;AACrD;AACA;AACA,+BAA+B,mFAAqB;AACpD;AACA,oDAAoD,oDAAoD,EAAE;AAC1G;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,mBAAmB,0CAAK,eAAe,sDAAQ,iCAAiC,6BAA6B,EAAE;AAC/G,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,mBAAmB,0CAAK,eAAe,sDAAQ,iCAAiC,sBAAsB,EAAE;AACxG,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,mBAAmB,0CAAK,eAAe,sDAAQ,iCAAiC,qBAAqB,EAAE;AACvG,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,mBAAmB,0CAAK,eAAe,sDAAQ,iCAAiC,uBAAuB,EAAE;AACzG,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,+BAA+B,kEAAe;AAC9C;AACA;AACA;AACA;AACA;AACA,sBAAsB,gEAAS;AAC/B,2CAA2C,yDAAyD,EAAE;AACtG;AACA,qCAAqC,gEAAS;AAC9C;AACA,SAAS;AACT;AACA,gCAAgC,gEAAS,QAAQ,gEAAS;AAC1D;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,mCAAmC,wEAAc;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,uCAAuC;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,+DAAS;AACvC;AACA;AACA;AACA;AACA,kCAAkC,0DAAI;AACtC;AACA;AACA;AACA,uCAAuC,yDAAG;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,oBAAoB;AACzD;AACA,4CAA4C,wBAAwB,EAAE;AACtE;AACA,mDAAmD,sDAAsD,EAAE;AAC3G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,oBAAoB;AACzD;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,mBAAmB,EAAE;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,uBAAuB,EAAE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iCAAiC,UAAU,iFAAmB,4BAA4B;AAC1F,mCAAmC,+DAAiB;AACpD,qCAAqC,qEAAuB;AAC5D,wCAAwC,kBAAkB,sBAAsB,wCAAwC,wBAAwB,YAAY,wBAAwB,qBAAqB,mBAAmB,yDAAyD,oBAAoB,iBAAiB,mBAAmB,mBAAmB,eAAe,gBAAgB,WAAW,2CAA2C,gBAAgB,eAAe,6CAA6C,WAAW,YAAY,0BAA0B,MAAM,OAAO,QAAQ,SAAS,kBAAkB,sBAAsB,UAAU,aAAa,oBAAoB,wDAAwD,gCAAgC,YAAY,yBAAyB,aAAa,gCAAgC,YAAY,6CAA6C,kBAAkB,mDAAmD,mBAAmB,4CAA4C,UAAU,mHAAmH,eAAe,4GAA4G,cAAc,iBAAiB,oEAAoE,kBAAkB,eAAe,8EAA8E,iBAAiB,gBAAgB,+CAA+C,gBAAgB,mBAAmB,kBAAkB,kBAAkB,yDAAyD,iBAAiB,mBAAmB,wCAAwC,eAAe,mBAAmB,kDAAkD,gBAAgB,kBAAkB,oCAAoC,WAAW,YAAY,iBAAiB,gBAAgB,8CAA8C,gBAAgB,iBAAiB,+EAA+E,WAAW,YAAY,eAAe,+EAA+E,gBAAgB,eAAe,mGAAmG,iBAAiB,cAAc,iBAAiB,MAAM,OAAO,QAAQ,SAAS,kBAAkB,oBAAoB,sBAAsB,gBAAgB,uBAAuB,aAAa,mBAAmB,eAAe,mBAAmB,YAAY,yFAAyF,WAAW,8CAA8C,sBAAsB,uBAAuB,iEAAiE,WAAW,iBAAiB,kBAAkB,uBAAuB,mBAAmB,aAAa,gBAAgB,iBAAiB,qBAAqB,YAAY,WAAW,eAAe;AACvhG,iBAAiB;AACjB;AACA;AACA,8CAA8C;AAC9C,SAAS,OAAO,wDAAU,EAAE;AAC5B,SAAS,OAAO,+DAAiB,EAAE;AACnC,SAAS,OAAO,iEAAc,gBAAgB,OAAO,sDAAQ,EAAE,GAAG;AAClE,SAAS,OAAO,sDAAM,gBAAgB,OAAO,sDAAQ,EAAE,GAAG;AAC1D,SAAS,OAAO,kEAAkB,gBAAgB,OAAO,sDAAQ,EAAE,GAAG;AACtE,SAAS,OAAO,wEAAiB,EAAE;AACnC,SAAS,OAAO,yDAAS,gBAAgB,OAAO,sDAAQ,EAAE,GAAG,OAAO,kDAAI,EAAE;AAC1E,MAAM;AACN;AACA,6BAA6B,OAAO,mDAAK,EAAE;AAC3C,oBAAoB,OAAO,mDAAK,EAAE;AAClC,uBAAuB,OAAO,mDAAK,EAAE;AACrC,iBAAiB,OAAO,mDAAK,EAAE;AAC/B,oBAAoB,OAAO,mDAAK,EAAE;AAClC,uBAAuB,OAAO,mDAAK,EAAE;AACrC,oBAAoB,OAAO,mDAAK,EAAE;AAClC,2BAA2B,OAAO,mDAAK,+BAA+B;AACtE,sBAAsB,OAAO,mDAAK,EAAE;AACpC,oBAAoB,OAAO,mDAAK,EAAE;AAClC,kBAAkB,OAAO,oDAAM,EAAE;AACjC,uBAAuB,OAAO,oDAAM,EAAE;AACtC,iBAAiB,OAAO,6DAAe;AACvC;AACA;AACA;AACA,qBAAqB,IAAI;AACzB;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,0DAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,0BAA0B,wBAAwB,EAAE;AACpD,+BAA+B,mBAAmB,mFAAqB,QAAQ,EAAE;AACjF;AACA;AACA,KAAK;AACL;AACA;AACA,0BAA0B,sEAAsE,EAAE;AAClG,+BAA+B,kBAAkB,mFAAqB,QAAQ,EAAE;AAChF;AACA;AACA,KAAK;AACL;AACA;AACA,0BAA0B,kCAAkC,EAAE;AAC9D;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,yDAAG,KAAK,4EAAc;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,6DAA6D;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,4EAAc;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,+CAA+C;AAC/C,SAAS,OAAO,wDAAU,EAAE;AAC5B,SAAS,gCAAgC,OAAO,oDAAM,sCAAsC;AAC5F,MAAM;AACN;AACA,oBAAoB,OAAO,mDAAK,8BAA8B;AAC9D,qBAAqB,OAAO,mDAAK,oCAAoC;AACrE,6BAA6B,OAAO,mDAAK,4CAA4C;AACrF,mBAAmB,OAAO,oDAAM,mCAAmC;AACnE,uBAAuB,OAAO,mDAAK,EAAE;AACrC,cAAc,OAAO,mDAAK,EAAE;AAC5B,oBAAoB,OAAO,mDAAK,EAAE;AAClC;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2DAAK;AAC7B;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,sDAAQ;AACxB;AACA;AACA;AACA,wBAAwB,wEAAiB;AACzC;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAE2L;AAC3L;;;;;;;;;;;;;ACh4CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiP;AACpI;AAC3E;AACe;AACa;AACO;AAClB;AAC0B;;AAE7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,4DAAc;AAClD;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,gEAAiB;AAC9B,iBAAiB,gEAAU,cAAc,sBAAsB,EAAE;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA,0BAA0B,0DAAY;AACtC;AACA;AACA;AACA,0BAA0B,mBAAmB,EAAE;AAC/C;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,oBAAoB,EAAE;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,uBAAuB,EAAE;AACnD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,0BAA0B,uBAAuB,EAAE;AACnD;AACA,6BAA6B,mFAAqB;AAClD;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,0BAA0B,uBAAuB,EAAE;AACnD;AACA,6BAA6B,mFAAqB;AAClD;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,8BAA8B,EAAE;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA,gDAAgD;AAChD,SAAS,OAAO,+DAAiB;AACjC,MAAM;AACN;AACA,kBAAkB,OAAO,oDAAM,EAAE;AACjC,mBAAmB,OAAO,6DAAe,SAAS,gEAAU,cAAc,uBAAuB,EAAE,IAAI,oBAAoB,IAAI;AAC/H,iBAAiB,OAAO,mDAAK,EAAE;AAC/B,gBAAgB,OAAO,mDAAK,EAAE;AAC9B,yBAAyB,OAAO,mDAAK,EAAE;AACvC,iBAAiB,OAAO,mDAAK,EAAE;AAC/B,oBAAoB,OAAO,mDAAK,EAAE;AAClC,oBAAoB,OAAO,mDAAK,EAAE;AAClC,oBAAoB,OAAO,mDAAK,EAAE;AAClC;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,+BAA+B,iFAAkB,CAAC,4EAAa;AAC/D;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,0DAAY;AACvC;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,0BAA0B,sBAAsB,EAAE;AAClD;AACA,kCAAkC,mFAAqB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,0BAA0B,oBAAoB,EAAE;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,8BAA8B,mFAAqB;AACnD,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,6BAA6B,mFAAqB;AAClD,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,kCAAkC,wBAAwB,EAAE;AAC5D;AACA;AACA,KAAK;AACL;AACA;AACA,0BAA0B,+CAA+C,EAAE;AAC3E;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA,q3CAAq3C,mBAAmB,0WAA0W;AAClvD;AACA,mCAAmC,+DAAiB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,qCAAqC,qEAAuB;AAC5D,gDAAgD,qBAAqB,wCAAwC,UAAU,iBAAiB,yBAAyB,sBAAsB,qBAAqB,iBAAiB,eAAe,oBAAoB,mBAAmB,mBAAmB,sBAAsB,WAAW,qBAAqB,sBAAsB,qBAAqB,kBAAkB,WAAW,YAAY,cAAc,wBAAwB,sBAAsB,YAAY,OAAO,kBAAkB,MAAM,mCAAmC,WAAW,iBAAiB,mBAAmB,kBAAkB,iDAAiD,gBAAgB,wBAAwB,kBAAkB,sBAAsB,YAAY,OAAO,kBAAkB,MAAM,4DAA4D,WAAW,uBAAuB,iDAAiD,gBAAgB,2CAA2C,qB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","file":"pattern-language-management-pattern-language-management-module-ngfactory.js","sourcesContent":["import { SPACE, BACKSPACE, DELETE, HOME, END, TAB, hasModifierKey, ENTER } from '@angular/cdk/keycodes';\nimport { Directive, EventEmitter, ElementRef, NgZone, Optional, Inject, ChangeDetectorRef, Attribute, ContentChild, forwardRef, Input, Output, InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Self, ContentChildren, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, mixinDisabled, RippleRenderer, MAT_RIPPLE_GLOBAL_OPTIONS, mixinErrorState, ErrorStateMatcher } from '@angular/material/core';\nimport { __extends, __spread } from 'tslib';\nimport { DOCUMENT } from '@angular/common';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Platform } from '@angular/cdk/platform';\nimport { Subject, merge } from 'rxjs';\nimport { take, takeUntil, startWith } from 'rxjs/operators';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { NgForm, FormGroupDirective, NgControl } from '@angular/forms';\nimport { MatFormFieldControl } from '@angular/material/form-field';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Event object emitted by MatChip when selected or deselected. */\nvar MatChipSelectionChange = /** @class */ (function () {\n    function MatChipSelectionChange(\n    /** Reference to the chip that emitted the event. */\n    source, \n    /** Whether the chip that emitted the event is selected. */\n    selected, \n    /** Whether the selection change was a result of a user interaction. */\n    isUserInput) {\n        if (isUserInput === void 0) { isUserInput = false; }\n        this.source = source;\n        this.selected = selected;\n        this.isUserInput = isUserInput;\n    }\n    return MatChipSelectionChange;\n}());\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nvar MatChipBase = /** @class */ (function () {\n    function MatChipBase(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n    return MatChipBase;\n}());\nvar _MatChipMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary'), -1);\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\nvar MatChipAvatar = /** @class */ (function () {\n    function MatChipAvatar() {\n    }\n    MatChipAvatar.decorators = [\n        { type: Directive, args: [{\n                    selector: 'mat-chip-avatar, [matChipAvatar]',\n                    host: { 'class': 'mat-chip-avatar' }\n                },] }\n    ];\n    return MatChipAvatar;\n}());\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\nvar MatChipTrailingIcon = /** @class */ (function () {\n    function MatChipTrailingIcon() {\n    }\n    MatChipTrailingIcon.decorators = [\n        { type: Directive, args: [{\n                    selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n                    host: { 'class': 'mat-chip-trailing-icon' }\n                },] }\n    ];\n    return MatChipTrailingIcon;\n}());\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\nvar MatChip = /** @class */ (function (_super) {\n    __extends(MatChip, _super);\n    function MatChip(_elementRef, _ngZone, platform, globalRippleOptions, \n    // @breaking-change 8.0.0 `animationMode` parameter to become required.\n    animationMode, \n    // @breaking-change 9.0.0 `_changeDetectorRef` parameter to become required.\n    _changeDetectorRef, tabIndex, \n    // @breaking-change 11.0.0 `_document` parameter to become required.\n    _document) {\n        var _this = _super.call(this, _elementRef) || this;\n        _this._elementRef = _elementRef;\n        _this._ngZone = _ngZone;\n        _this._changeDetectorRef = _changeDetectorRef;\n        /** Whether the chip has focus. */\n        _this._hasFocus = false;\n        /** Whether the chip list is selectable */\n        _this.chipListSelectable = true;\n        /** Whether the chip list is in multi-selection mode. */\n        _this._chipListMultiple = false;\n        _this._selected = false;\n        _this._selectable = true;\n        _this._removable = true;\n        /** Emits when the chip is focused. */\n        _this._onFocus = new Subject();\n        /** Emits when the chip is blured. */\n        _this._onBlur = new Subject();\n        /** Emitted when the chip is selected or deselected. */\n        _this.selectionChange = new EventEmitter();\n        /** Emitted when the chip is destroyed. */\n        _this.destroyed = new EventEmitter();\n        /** Emitted when a chip is to be removed. */\n        _this.removed = new EventEmitter();\n        _this._addHostClassName();\n        // Dynamically create the ripple target, append it within the chip, and use it as the\n        // chip's ripple target. Adding the class '.mat-chip-ripple' ensures that it will have\n        // the proper styles.\n        _this._chipRippleTarget = (_document || document).createElement('div');\n        _this._chipRippleTarget.classList.add('mat-chip-ripple');\n        _this._elementRef.nativeElement.appendChild(_this._chipRippleTarget);\n        _this._chipRipple = new RippleRenderer(_this, _ngZone, _this._chipRippleTarget, platform);\n        _this._chipRipple.setupTriggerEvents(_elementRef);\n        _this.rippleConfig = globalRippleOptions || {};\n        _this._animationsDisabled = animationMode === 'NoopAnimations';\n        _this.tabIndex = tabIndex != null ? (parseInt(tabIndex) || -1) : -1;\n        return _this;\n    }\n    Object.defineProperty(MatChip.prototype, \"rippleDisabled\", {\n        /**\n         * Whether ripples are disabled on interaction\n         * @docs-private\n         */\n        get: function () {\n            return this.disabled || this.disableRipple || !!this.rippleConfig.disabled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatChip.prototype, \"selected\", {\n        /** Whether the chip is selected. */\n        get: function () { return this._selected; },\n        set: function (value) {\n            var coercedValue = coerceBooleanProperty(value);\n            if (coercedValue !== this._selected) {\n                this._selected = coercedValue;\n                this._dispatchSelectionChange();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatChip.prototype, \"value\", {\n        /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n        get: function () {\n            return this._value !== undefined\n                ? this._value\n                : this._elementRef.nativeElement.textContent;\n        },\n        set: function (value) { this._value = value; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatChip.prototype, \"selectable\", {\n        /**\n         * Whether or not the chip is selectable. When a chip is not selectable,\n         * changes to its selected state are always ignored. By default a chip is\n         * selectable, and it becomes non-selectable if its parent chip list is\n         * not selectable.\n         */\n        get: function () { return this._selectable && this.chipListSelectable; },\n        set: function (value) {\n            this._selectable = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatChip.prototype, \"removable\", {\n        /**\n         * Determines whether or not the chip displays the remove styling and emits (removed) events.\n         */\n        get: function () { return this._removable; },\n        set: function (value) {\n            this._removable = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatChip.prototype, \"ariaSelected\", {\n        /** The ARIA selected applied to the chip. */\n        get: function () {\n            // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n            // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n            return this.selectable && (this._chipListMultiple || this.selected) ?\n                this.selected.toString() : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    MatChip.prototype._addHostClassName = function () {\n        var basicChipAttrName = 'mat-basic-chip';\n        var element = this._elementRef.nativeElement;\n        if (element.hasAttribute(basicChipAttrName) ||\n            element.tagName.toLowerCase() === basicChipAttrName) {\n            element.classList.add(basicChipAttrName);\n            return;\n        }\n        else {\n            element.classList.add('mat-standard-chip');\n        }\n    };\n    MatChip.prototype.ngOnDestroy = function () {\n        this.destroyed.emit({ chip: this });\n        this._chipRipple._removeTriggerEvents();\n    };\n    /** Selects the chip. */\n    MatChip.prototype.select = function () {\n        if (!this._selected) {\n            this._selected = true;\n            this._dispatchSelectionChange();\n            this._markForCheck();\n        }\n    };\n    /** Deselects the chip. */\n    MatChip.prototype.deselect = function () {\n        if (this._selected) {\n            this._selected = false;\n            this._dispatchSelectionChange();\n            this._markForCheck();\n        }\n    };\n    /** Select this chip and emit selected event */\n    MatChip.prototype.selectViaInteraction = function () {\n        if (!this._selected) {\n            this._selected = true;\n            this._dispatchSelectionChange(true);\n            this._markForCheck();\n        }\n    };\n    /** Toggles the current selected state of this chip. */\n    MatChip.prototype.toggleSelected = function (isUserInput) {\n        if (isUserInput === void 0) { isUserInput = false; }\n        this._selected = !this.selected;\n        this._dispatchSelectionChange(isUserInput);\n        this._markForCheck();\n        return this.selected;\n    };\n    /** Allows for programmatic focusing of the chip. */\n    MatChip.prototype.focus = function () {\n        if (!this._hasFocus) {\n            this._elementRef.nativeElement.focus();\n            this._onFocus.next({ chip: this });\n        }\n        this._hasFocus = true;\n    };\n    /**\n     * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n     * BACKSPACE keys are pressed.\n     *\n     * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n     */\n    MatChip.prototype.remove = function () {\n        if (this.removable) {\n            this.removed.emit({ chip: this });\n        }\n    };\n    /** Handles click events on the chip. */\n    MatChip.prototype._handleClick = function (event) {\n        if (this.disabled) {\n            event.preventDefault();\n        }\n        else {\n            event.stopPropagation();\n        }\n    };\n    /** Handle custom key presses. */\n    MatChip.prototype._handleKeydown = function (event) {\n        if (this.disabled) {\n            return;\n        }\n        switch (event.keyCode) {\n            case DELETE:\n            case BACKSPACE:\n                // If we are removable, remove the focused chip\n                this.remove();\n                // Always prevent so page navigation does not occur\n                event.preventDefault();\n                break;\n            case SPACE:\n                // If we are selectable, toggle the focused chip\n                if (this.selectable) {\n                    this.toggleSelected(true);\n                }\n                // Always prevent space from scrolling the page since the list has focus\n                event.preventDefault();\n                break;\n        }\n    };\n    MatChip.prototype._blur = function () {\n        var _this = this;\n        // When animations are enabled, Angular may end up removing the chip from the DOM a little\n        // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n        // that moves focus not the next item. To work around the issue, we defer marking the chip\n        // as not focused until the next time the zone stabilizes.\n        this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1))\n            .subscribe(function () {\n            _this._ngZone.run(function () {\n                _this._hasFocus = false;\n                _this._onBlur.next({ chip: _this });\n            });\n        });\n    };\n    MatChip.prototype._dispatchSelectionChange = function (isUserInput) {\n        if (isUserInput === void 0) { isUserInput = false; }\n        this.selectionChange.emit({\n            source: this,\n            isUserInput: isUserInput,\n            selected: this._selected\n        });\n    };\n    MatChip.prototype._markForCheck = function () {\n        // @breaking-change 9.0.0 Remove this method once the _changeDetectorRef is a required param.\n        if (this._changeDetectorRef) {\n            this._changeDetectorRef.markForCheck();\n        }\n    };\n    MatChip.decorators = [\n        { type: Directive, args: [{\n                    selector: \"mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]\",\n                    inputs: ['color', 'disabled', 'disableRipple', 'tabIndex'],\n                    exportAs: 'matChip',\n                    host: {\n                        'class': 'mat-chip mat-focus-indicator',\n                        '[attr.tabindex]': 'disabled ? null : tabIndex',\n                        'role': 'option',\n                        '[class.mat-chip-selected]': 'selected',\n                        '[class.mat-chip-with-avatar]': 'avatar',\n                        '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n                        '[class.mat-chip-disabled]': 'disabled',\n                        '[class._mat-animation-noopable]': '_animationsDisabled',\n                        '[attr.disabled]': 'disabled || null',\n                        '[attr.aria-disabled]': 'disabled.toString()',\n                        '[attr.aria-selected]': 'ariaSelected',\n                        '(click)': '_handleClick($event)',\n                        '(keydown)': '_handleKeydown($event)',\n                        '(focus)': 'focus()',\n                        '(blur)': '_blur()',\n                    },\n                },] }\n    ];\n    /** @nocollapse */\n    MatChip.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: NgZone },\n        { type: Platform },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RIPPLE_GLOBAL_OPTIONS,] }] },\n        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n        { type: ChangeDetectorRef },\n        { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }\n    ]; };\n    MatChip.propDecorators = {\n        avatar: [{ type: ContentChild, args: [MatChipAvatar,] }],\n        trailingIcon: [{ type: ContentChild, args: [MatChipTrailingIcon,] }],\n        removeIcon: [{ type: ContentChild, args: [forwardRef(function () { return MatChipRemove; }),] }],\n        selected: [{ type: Input }],\n        value: [{ type: Input }],\n        selectable: [{ type: Input }],\n        removable: [{ type: Input }],\n        selectionChange: [{ type: Output }],\n        destroyed: [{ type: Output }],\n        removed: [{ type: Output }]\n    };\n    return MatChip;\n}(_MatChipMixinBase));\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\nvar MatChipRemove = /** @class */ (function () {\n    function MatChipRemove(_parentChip, \n    // @breaking-change 11.0.0 `elementRef` parameter to be made required.\n    elementRef) {\n        this._parentChip = _parentChip;\n        // @breaking-change 11.0.0 Remove null check for `elementRef`.\n        if (elementRef && elementRef.nativeElement.nodeName === 'BUTTON') {\n            elementRef.nativeElement.setAttribute('type', 'button');\n        }\n    }\n    /** Calls the parent chip's public `remove()` method if applicable. */\n    MatChipRemove.prototype._handleClick = function (event) {\n        var parentChip = this._parentChip;\n        if (parentChip.removable && !parentChip.disabled) {\n            parentChip.remove();\n        }\n        // We need to stop event propagation because otherwise the event will bubble up to the\n        // form field and cause the `onContainerClick` method to be invoked. This method would then\n        // reset the focused chip that has been focused after chip removal. Usually the parent\n        // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n        // that the chip is being removed before the event bubbles up.\n        event.stopPropagation();\n    };\n    MatChipRemove.decorators = [\n        { type: Directive, args: [{\n                    selector: '[matChipRemove]',\n                    host: {\n                        'class': 'mat-chip-remove mat-chip-trailing-icon',\n                        '(click)': '_handleClick($event)',\n                    }\n                },] }\n    ];\n    /** @nocollapse */\n    MatChipRemove.ctorParameters = function () { return [\n        { type: MatChip },\n        { type: ElementRef }\n    ]; };\n    return MatChipRemove;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for the chips module. */\nvar MAT_CHIPS_DEFAULT_OPTIONS = new InjectionToken('mat-chips-default-options');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nvar MatChipListBase = /** @class */ (function () {\n    function MatChipListBase(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, \n    /** @docs-private */\n    ngControl) {\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n    return MatChipListBase;\n}());\nvar _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n// Increasing integer for generating unique ids for chip-list components.\nvar nextUniqueId = 0;\n/** Change event object that is emitted when the chip list value has changed. */\nvar MatChipListChange = /** @class */ (function () {\n    function MatChipListChange(\n    /** Chip list that emitted the event. */\n    source, \n    /** Value of the chip list when the event was emitted. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n    return MatChipListChange;\n}());\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\nvar MatChipList = /** @class */ (function (_super) {\n    __extends(MatChipList, _super);\n    function MatChipList(_elementRef, _changeDetectorRef, _dir, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, \n    /** @docs-private */\n    ngControl) {\n        var _this = _super.call(this, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) || this;\n        _this._elementRef = _elementRef;\n        _this._changeDetectorRef = _changeDetectorRef;\n        _this._dir = _dir;\n        _this.ngControl = ngControl;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        _this.controlType = 'mat-chip-list';\n        /**\n         * When a chip is destroyed, we store the index of the destroyed chip until the chips\n         * query list notifies about the update. This is necessary because we cannot determine an\n         * appropriate chip that should receive focus until the array of chips updated completely.\n         */\n        _this._lastDestroyedChipIndex = null;\n        /** Subject that emits when the component has been destroyed. */\n        _this._destroyed = new Subject();\n        /** Uid of the chip list */\n        _this._uid = \"mat-chip-list-\" + nextUniqueId++;\n        /** Tab index for the chip list. */\n        _this._tabIndex = 0;\n        /**\n         * User defined tab index.\n         * When it is not null, use user defined tab index. Otherwise use _tabIndex\n         */\n        _this._userTabIndex = null;\n        /** Function when touched */\n        _this._onTouched = function () { };\n        /** Function when changed */\n        _this._onChange = function () { };\n        _this._multiple = false;\n        _this._compareWith = function (o1, o2) { return o1 === o2; };\n        _this._required = false;\n        _this._disabled = false;\n        /** Orientation of the chip list. */\n        _this.ariaOrientation = 'horizontal';\n        _this._selectable = true;\n        /** Event emitted when the selected chip list value has been changed by the user. */\n        _this.change = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * @docs-private\n         */\n        _this.valueChange = new EventEmitter();\n        if (_this.ngControl) {\n            _this.ngControl.valueAccessor = _this;\n        }\n        return _this;\n    }\n    Object.defineProperty(MatChipList.prototype, \"selected\", {\n        /** The array of selected chips inside chip list. */\n        get: function () {\n            return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatChipList.prototype, \"role\", {\n        /** The ARIA role applied to the chip list. */\n        get: function () { return this.empty ? null : 'listbox'; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatChipList.prototype, \"multiple\", {\n        /** Whether the user should be allowed to select multiple chips. */\n        get: function () { return this._multiple; },\n        set: function (value) {\n            this._multiple = coerceBooleanProperty(value);\n            this._syncChipsState();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatChipList.prototype, \"compareWith\", {\n        /**\n         * A function to compare the option values with the selected values. The first argument\n         * is a value from an option. The second is a value from the selection. A boolean\n         * should be returned.\n         */\n        get: function () { return this._compareWith; },\n        set: function (fn) {\n            this._compareWith = fn;\n            if (this._selectionModel) {\n                // A different comparator means the selection could change.\n                this._initializeSelection();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatChipList.prototype, \"value\", {\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        get: function () { return this._value; },\n        set: function (value) {\n            this.writeValue(value);\n            this._value = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatChipList.prototype, \"id\", {\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        get: function () {\n            return this._chipInput ? this._chipInput.id : this._uid;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatChipList.prototype, \"required\", {\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        get: function () { return this._required; },\n        set: function (value) {\n            this._required = coerceBooleanProperty(value);\n            this.stateChanges.next();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatChipList.prototype, \"placeholder\", {\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        get: function () {\n            return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n        },\n        set: function (value) {\n            this._placeholder = value;\n            this.stateChanges.next();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatChipList.prototype, \"focused\", {\n        /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n        get: function () {\n            return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatChipList.prototype, \"empty\", {\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        get: function () {\n            return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatChipList.prototype, \"shouldLabelFloat\", {\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        get: function () { return !this.empty || this.focused; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatChipList.prototype, \"disabled\", {\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        get: function () { return this.ngControl ? !!this.ngControl.disabled : this._disabled; },\n        set: function (value) {\n            this._disabled = coerceBooleanProperty(value);\n            this._syncChipsState();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatChipList.prototype, \"selectable\", {\n        /**\n         * Whether or not this chip list is selectable. When a chip list is not selectable,\n         * the selected states for all the chips inside the chip list are always ignored.\n         */\n        get: function () { return this._selectable; },\n        set: function (value) {\n            var _this = this;\n            this._selectable = coerceBooleanProperty(value);\n            if (this.chips) {\n                this.chips.forEach(function (chip) { return chip.chipListSelectable = _this._selectable; });\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatChipList.prototype, \"tabIndex\", {\n        set: function (value) {\n            this._userTabIndex = value;\n            this._tabIndex = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatChipList.prototype, \"chipSelectionChanges\", {\n        /** Combined stream of all of the child chips' selection change events. */\n        get: function () {\n            return merge.apply(void 0, __spread(this.chips.map(function (chip) { return chip.selectionChange; })));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatChipList.prototype, \"chipFocusChanges\", {\n        /** Combined stream of all of the child chips' focus change events. */\n        get: function () {\n            return merge.apply(void 0, __spread(this.chips.map(function (chip) { return chip._onFocus; })));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatChipList.prototype, \"chipBlurChanges\", {\n        /** Combined stream of all of the child chips' blur change events. */\n        get: function () {\n            return merge.apply(void 0, __spread(this.chips.map(function (chip) { return chip._onBlur; })));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatChipList.prototype, \"chipRemoveChanges\", {\n        /** Combined stream of all of the child chips' remove change events. */\n        get: function () {\n            return merge.apply(void 0, __spread(this.chips.map(function (chip) { return chip.destroyed; })));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    MatChipList.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        this._keyManager = new FocusKeyManager(this.chips)\n            .withWrap()\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n        if (this._dir) {\n            this._dir.change\n                .pipe(takeUntil(this._destroyed))\n                .subscribe(function (dir) { return _this._keyManager.withHorizontalOrientation(dir); });\n        }\n        this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(function () {\n            _this._allowFocusEscape();\n        });\n        // When the list changes, re-subscribe\n        this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(function () {\n            if (_this.disabled) {\n                // Since this happens after the content has been\n                // checked, we need to defer it to the next tick.\n                Promise.resolve().then(function () {\n                    _this._syncChipsState();\n                });\n            }\n            _this._resetChips();\n            // Reset chips selected/deselected status\n            _this._initializeSelection();\n            // Check to see if we need to update our tab index\n            _this._updateTabIndex();\n            // Check to see if we have a destroyed chip and need to refocus\n            _this._updateFocusForDestroyedChips();\n            _this.stateChanges.next();\n        });\n    };\n    MatChipList.prototype.ngOnInit = function () {\n        this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n        this.stateChanges.next();\n    };\n    MatChipList.prototype.ngDoCheck = function () {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n    };\n    MatChipList.prototype.ngOnDestroy = function () {\n        this._destroyed.next();\n        this._destroyed.complete();\n        this.stateChanges.complete();\n        this._dropSubscriptions();\n    };\n    /** Associates an HTML input element with this chip list. */\n    MatChipList.prototype.registerInput = function (inputElement) {\n        this._chipInput = inputElement;\n    };\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    MatChipList.prototype.setDescribedByIds = function (ids) { this._ariaDescribedby = ids.join(' '); };\n    // Implemented as part of ControlValueAccessor.\n    MatChipList.prototype.writeValue = function (value) {\n        if (this.chips) {\n            this._setSelectionByValue(value, false);\n        }\n    };\n    // Implemented as part of ControlValueAccessor.\n    MatChipList.prototype.registerOnChange = function (fn) {\n        this._onChange = fn;\n    };\n    // Implemented as part of ControlValueAccessor.\n    MatChipList.prototype.registerOnTouched = function (fn) {\n        this._onTouched = fn;\n    };\n    // Implemented as part of ControlValueAccessor.\n    MatChipList.prototype.setDisabledState = function (isDisabled) {\n        this.disabled = isDisabled;\n        this.stateChanges.next();\n    };\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    MatChipList.prototype.onContainerClick = function (event) {\n        if (!this._originatesFromChip(event)) {\n            this.focus();\n        }\n    };\n    /**\n     * Focuses the first non-disabled chip in this chip list, or the associated input when there\n     * are no eligible chips.\n     */\n    MatChipList.prototype.focus = function (options) {\n        if (this.disabled) {\n            return;\n        }\n        // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n        // Focus on first element if there's no chipInput inside chip-list\n        if (this._chipInput && this._chipInput.focused) {\n            // do nothing\n        }\n        else if (this.chips.length > 0) {\n            this._keyManager.setFirstItemActive();\n            this.stateChanges.next();\n        }\n        else {\n            this._focusInput(options);\n            this.stateChanges.next();\n        }\n    };\n    /** Attempt to focus an input if we have one. */\n    MatChipList.prototype._focusInput = function (options) {\n        if (this._chipInput) {\n            this._chipInput.focus(options);\n        }\n    };\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     */\n    MatChipList.prototype._keydown = function (event) {\n        var target = event.target;\n        // If they are on an empty input and hit backspace, focus the last chip\n        if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n            this._keyManager.setLastItemActive();\n            event.preventDefault();\n        }\n        else if (target && target.classList.contains('mat-chip')) {\n            if (event.keyCode === HOME) {\n                this._keyManager.setFirstItemActive();\n                event.preventDefault();\n            }\n            else if (event.keyCode === END) {\n                this._keyManager.setLastItemActive();\n                event.preventDefault();\n            }\n            else {\n                this._keyManager.onKeydown(event);\n            }\n            this.stateChanges.next();\n        }\n    };\n    /**\n     * Check the tab index as you should not be allowed to focus an empty list.\n     */\n    MatChipList.prototype._updateTabIndex = function () {\n        // If we have 0 chips, we should not allow keyboard focus\n        this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n    };\n    /**\n     * If the amount of chips changed, we need to update the\n     * key manager state and focus the next closest chip.\n     */\n    MatChipList.prototype._updateFocusForDestroyedChips = function () {\n        // Move focus to the closest chip. If no other chips remain, focus the chip-list itself.\n        if (this._lastDestroyedChipIndex != null) {\n            if (this.chips.length) {\n                var newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n                this._keyManager.setActiveItem(newChipIndex);\n            }\n            else {\n                this.focus();\n            }\n        }\n        this._lastDestroyedChipIndex = null;\n    };\n    /**\n     * Utility to ensure all indexes are valid.\n     *\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of chips.\n     */\n    MatChipList.prototype._isValidIndex = function (index) {\n        return index >= 0 && index < this.chips.length;\n    };\n    MatChipList.prototype._isInputEmpty = function (element) {\n        if (element && element.nodeName.toLowerCase() === 'input') {\n            var input = element;\n            return !input.value;\n        }\n        return false;\n    };\n    MatChipList.prototype._setSelectionByValue = function (value, isUserInput) {\n        var _this = this;\n        if (isUserInput === void 0) { isUserInput = true; }\n        this._clearSelection();\n        this.chips.forEach(function (chip) { return chip.deselect(); });\n        if (Array.isArray(value)) {\n            value.forEach(function (currentValue) { return _this._selectValue(currentValue, isUserInput); });\n            this._sortValues();\n        }\n        else {\n            var correspondingChip = this._selectValue(value, isUserInput);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what chip the user interacted with last.\n            if (correspondingChip) {\n                if (isUserInput) {\n                    this._keyManager.setActiveItem(correspondingChip);\n                }\n            }\n        }\n    };\n    /**\n     * Finds and selects the chip based on its value.\n     * @returns Chip that has the corresponding value.\n     */\n    MatChipList.prototype._selectValue = function (value, isUserInput) {\n        var _this = this;\n        if (isUserInput === void 0) { isUserInput = true; }\n        var correspondingChip = this.chips.find(function (chip) {\n            return chip.value != null && _this._compareWith(chip.value, value);\n        });\n        if (correspondingChip) {\n            isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n            this._selectionModel.select(correspondingChip);\n        }\n        return correspondingChip;\n    };\n    MatChipList.prototype._initializeSelection = function () {\n        var _this = this;\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(function () {\n            if (_this.ngControl || _this._value) {\n                _this._setSelectionByValue(_this.ngControl ? _this.ngControl.value : _this._value, false);\n                _this.stateChanges.next();\n            }\n        });\n    };\n    /**\n     * Deselects every chip in the list.\n     * @param skip Chip that should not be deselected.\n     */\n    MatChipList.prototype._clearSelection = function (skip) {\n        this._selectionModel.clear();\n        this.chips.forEach(function (chip) {\n            if (chip !== skip) {\n                chip.deselect();\n            }\n        });\n        this.stateChanges.next();\n    };\n    /**\n     * Sorts the model values, ensuring that they keep the same\n     * order that they have in the panel.\n     */\n    MatChipList.prototype._sortValues = function () {\n        var _this = this;\n        if (this._multiple) {\n            this._selectionModel.clear();\n            this.chips.forEach(function (chip) {\n                if (chip.selected) {\n                    _this._selectionModel.select(chip);\n                }\n            });\n            this.stateChanges.next();\n        }\n    };\n    /** Emits change event to set the model value. */\n    MatChipList.prototype._propagateChanges = function (fallbackValue) {\n        var valueToEmit = null;\n        if (Array.isArray(this.selected)) {\n            valueToEmit = this.selected.map(function (chip) { return chip.value; });\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.change.emit(new MatChipListChange(this, valueToEmit));\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this._changeDetectorRef.markForCheck();\n    };\n    /** When blurred, mark the field as touched when focus moved outside the chip list. */\n    MatChipList.prototype._blur = function () {\n        var _this = this;\n        if (!this._hasFocusedChip()) {\n            this._keyManager.setActiveItem(-1);\n        }\n        if (!this.disabled) {\n            if (this._chipInput) {\n                // If there's a chip input, we should check whether the focus moved to chip input.\n                // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n                // to chip input, do nothing.\n                // Timeout is needed to wait for the focus() event trigger on chip input.\n                setTimeout(function () {\n                    if (!_this.focused) {\n                        _this._markAsTouched();\n                    }\n                });\n            }\n            else {\n                // If there's no chip input, then mark the field as touched.\n                this._markAsTouched();\n            }\n        }\n    };\n    /** Mark the field as touched */\n    MatChipList.prototype._markAsTouched = function () {\n        this._onTouched();\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    };\n    /**\n     * Removes the `tabindex` from the chip list and resets it back afterwards, allowing the\n     * user to tab out of it. This prevents the list from capturing focus and redirecting\n     * it back to the first chip, creating a focus trap, if it user tries to tab away.\n     */\n    MatChipList.prototype._allowFocusEscape = function () {\n        var _this = this;\n        if (this._tabIndex !== -1) {\n            this._tabIndex = -1;\n            setTimeout(function () {\n                _this._tabIndex = _this._userTabIndex || 0;\n                _this._changeDetectorRef.markForCheck();\n            });\n        }\n    };\n    MatChipList.prototype._resetChips = function () {\n        this._dropSubscriptions();\n        this._listenToChipsFocus();\n        this._listenToChipsSelection();\n        this._listenToChipsRemoved();\n    };\n    MatChipList.prototype._dropSubscriptions = function () {\n        if (this._chipFocusSubscription) {\n            this._chipFocusSubscription.unsubscribe();\n            this._chipFocusSubscription = null;\n        }\n        if (this._chipBlurSubscription) {\n            this._chipBlurSubscription.unsubscribe();\n            this._chipBlurSubscription = null;\n        }\n        if (this._chipSelectionSubscription) {\n            this._chipSelectionSubscription.unsubscribe();\n            this._chipSelectionSubscription = null;\n        }\n        if (this._chipRemoveSubscription) {\n            this._chipRemoveSubscription.unsubscribe();\n            this._chipRemoveSubscription = null;\n        }\n    };\n    /** Listens to user-generated selection events on each chip. */\n    MatChipList.prototype._listenToChipsSelection = function () {\n        var _this = this;\n        this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(function (event) {\n            event.source.selected\n                ? _this._selectionModel.select(event.source)\n                : _this._selectionModel.deselect(event.source);\n            // For single selection chip list, make sure the deselected value is unselected.\n            if (!_this.multiple) {\n                _this.chips.forEach(function (chip) {\n                    if (!_this._selectionModel.isSelected(chip) && chip.selected) {\n                        chip.deselect();\n                    }\n                });\n            }\n            if (event.isUserInput) {\n                _this._propagateChanges();\n            }\n        });\n    };\n    /** Listens to user-generated selection events on each chip. */\n    MatChipList.prototype._listenToChipsFocus = function () {\n        var _this = this;\n        this._chipFocusSubscription = this.chipFocusChanges.subscribe(function (event) {\n            var chipIndex = _this.chips.toArray().indexOf(event.chip);\n            if (_this._isValidIndex(chipIndex)) {\n                _this._keyManager.updateActiveItem(chipIndex);\n            }\n            _this.stateChanges.next();\n        });\n        this._chipBlurSubscription = this.chipBlurChanges.subscribe(function () {\n            _this._blur();\n            _this.stateChanges.next();\n        });\n    };\n    MatChipList.prototype._listenToChipsRemoved = function () {\n        var _this = this;\n        this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(function (event) {\n            var chip = event.chip;\n            var chipIndex = _this.chips.toArray().indexOf(event.chip);\n            // In case the chip that will be removed is currently focused, we temporarily store\n            // the index in order to be able to determine an appropriate sibling chip that will\n            // receive focus.\n            if (_this._isValidIndex(chipIndex) && chip._hasFocus) {\n                _this._lastDestroyedChipIndex = chipIndex;\n            }\n        });\n    };\n    /** Checks whether an event comes from inside a chip element. */\n    MatChipList.prototype._originatesFromChip = function (event) {\n        var currentElement = event.target;\n        while (currentElement && currentElement !== this._elementRef.nativeElement) {\n            if (currentElement.classList.contains('mat-chip')) {\n                return true;\n            }\n            currentElement = currentElement.parentElement;\n        }\n        return false;\n    };\n    /** Checks whether any of the chips is focused. */\n    MatChipList.prototype._hasFocusedChip = function () {\n        return this.chips.some(function (chip) { return chip._hasFocus; });\n    };\n    /** Syncs the list's state with the individual chips. */\n    MatChipList.prototype._syncChipsState = function () {\n        var _this = this;\n        if (this.chips) {\n            this.chips.forEach(function (chip) {\n                chip.disabled = _this._disabled;\n                chip._chipListMultiple = _this.multiple;\n            });\n        }\n    };\n    MatChipList.decorators = [\n        { type: Component, args: [{\n                    selector: 'mat-chip-list',\n                    template: \"<div class=\\\"mat-chip-list-wrapper\\\"><ng-content></ng-content></div>\",\n                    exportAs: 'matChipList',\n                    host: {\n                        '[attr.tabindex]': 'disabled ? null : _tabIndex',\n                        '[attr.aria-describedby]': '_ariaDescribedby || null',\n                        '[attr.aria-required]': 'role ? required : null',\n                        '[attr.aria-disabled]': 'disabled.toString()',\n                        '[attr.aria-invalid]': 'errorState',\n                        '[attr.aria-multiselectable]': 'multiple',\n                        '[attr.role]': 'role',\n                        '[class.mat-chip-list-disabled]': 'disabled',\n                        '[class.mat-chip-list-invalid]': 'errorState',\n                        '[class.mat-chip-list-required]': 'required',\n                        '[attr.aria-orientation]': 'ariaOrientation',\n                        'class': 'mat-chip-list',\n                        '(focus)': 'focus()',\n                        '(blur)': '_blur()',\n                        '(keydown)': '_keydown($event)',\n                        '[id]': '_uid',\n                    },\n                    providers: [{ provide: MatFormFieldControl, useExisting: MatChipList }],\n                    encapsulation: ViewEncapsulation.None,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    styles: [\".mat-chip{position:relative;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0);border:none;-webkit-appearance:none;-moz-appearance:none}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}._mat-animation-noopable.mat-standard-chip{transition:none;animation:none}.mat-standard-chip .mat-chip-remove.mat-icon{width:18px;height:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:\\\"\\\";pointer-events:none;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:none}.mat-standard-chip:focus::after{opacity:.16}.cdk-high-contrast-active .mat-standard-chip{outline:solid 1px}.cdk-high-contrast-active .mat-standard-chip:focus{outline:dotted 2px}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit;overflow:hidden}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper input.mat-input-element,.mat-chip-list-wrapper .mat-standard-chip{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\\n\"]\n                }] }\n    ];\n    /** @nocollapse */\n    MatChipList.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: ChangeDetectorRef },\n        { type: Directionality, decorators: [{ type: Optional }] },\n        { type: NgForm, decorators: [{ type: Optional }] },\n        { type: FormGroupDirective, decorators: [{ type: Optional }] },\n        { type: ErrorStateMatcher },\n        { type: NgControl, decorators: [{ type: Optional }, { type: Self }] }\n    ]; };\n    MatChipList.propDecorators = {\n        errorStateMatcher: [{ type: Input }],\n        multiple: [{ type: Input }],\n        compareWith: [{ type: Input }],\n        value: [{ type: Input }],\n        required: [{ type: Input }],\n        placeholder: [{ type: Input }],\n        disabled: [{ type: Input }],\n        ariaOrientation: [{ type: Input, args: ['aria-orientation',] }],\n        selectable: [{ type: Input }],\n        tabIndex: [{ type: Input }],\n        change: [{ type: Output }],\n        valueChange: [{ type: Output }],\n        chips: [{ type: ContentChildren, args: [MatChip, {\n                        // We need to use `descendants: true`, because Ivy will no longer match\n                        // indirect descendants if it's left as false.\n                        descendants: true\n                    },] }]\n    };\n    return MatChipList;\n}(_MatChipListMixinBase));\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Increasing integer for generating unique ids.\nvar nextUniqueId$1 = 0;\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\nvar MatChipInput = /** @class */ (function () {\n    function MatChipInput(_elementRef, _defaultOptions) {\n        this._elementRef = _elementRef;\n        this._defaultOptions = _defaultOptions;\n        /** Whether the control is focused. */\n        this.focused = false;\n        this._addOnBlur = false;\n        /**\n         * The list of key codes that will trigger a chipEnd event.\n         *\n         * Defaults to `[ENTER]`.\n         */\n        this.separatorKeyCodes = this._defaultOptions.separatorKeyCodes;\n        /** Emitted when a chip is to be added. */\n        this.chipEnd = new EventEmitter();\n        /** The input's placeholder text. */\n        this.placeholder = '';\n        /** Unique id for the input. */\n        this.id = \"mat-chip-list-input-\" + nextUniqueId$1++;\n        this._disabled = false;\n        this._inputElement = this._elementRef.nativeElement;\n    }\n    Object.defineProperty(MatChipInput.prototype, \"chipList\", {\n        /** Register input for chip list */\n        set: function (value) {\n            if (value) {\n                this._chipList = value;\n                this._chipList.registerInput(this);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatChipInput.prototype, \"addOnBlur\", {\n        /**\n         * Whether or not the chipEnd event will be emitted when the input is blurred.\n         */\n        get: function () { return this._addOnBlur; },\n        set: function (value) { this._addOnBlur = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatChipInput.prototype, \"disabled\", {\n        /** Whether the input is disabled. */\n        get: function () { return this._disabled || (this._chipList && this._chipList.disabled); },\n        set: function (value) { this._disabled = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatChipInput.prototype, \"empty\", {\n        /** Whether the input is empty. */\n        get: function () { return !this._inputElement.value; },\n        enumerable: true,\n        configurable: true\n    });\n    MatChipInput.prototype.ngOnChanges = function () {\n        this._chipList.stateChanges.next();\n    };\n    /** Utility method to make host definition/tests more clear. */\n    MatChipInput.prototype._keydown = function (event) {\n        // Allow the user's focus to escape when they're tabbing forward. Note that we don't\n        // want to do this when going backwards, because focus should go back to the first chip.\n        if (event && event.keyCode === TAB && !hasModifierKey(event, 'shiftKey')) {\n            this._chipList._allowFocusEscape();\n        }\n        this._emitChipEnd(event);\n    };\n    /** Checks to see if the blur should emit the (chipEnd) event. */\n    MatChipInput.prototype._blur = function () {\n        if (this.addOnBlur) {\n            this._emitChipEnd();\n        }\n        this.focused = false;\n        // Blur the chip list if it is not focused\n        if (!this._chipList.focused) {\n            this._chipList._blur();\n        }\n        this._chipList.stateChanges.next();\n    };\n    MatChipInput.prototype._focus = function () {\n        this.focused = true;\n        this._chipList.stateChanges.next();\n    };\n    /** Checks to see if the (chipEnd) event needs to be emitted. */\n    MatChipInput.prototype._emitChipEnd = function (event) {\n        if (!this._inputElement.value && !!event) {\n            this._chipList._keydown(event);\n        }\n        if (!event || this._isSeparatorKey(event)) {\n            this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n            if (event) {\n                event.preventDefault();\n            }\n        }\n    };\n    MatChipInput.prototype._onInput = function () {\n        // Let chip list know whenever the value changes.\n        this._chipList.stateChanges.next();\n    };\n    /** Focuses the input. */\n    MatChipInput.prototype.focus = function (options) {\n        this._inputElement.focus(options);\n    };\n    /** Checks whether a keycode is one of the configured separators. */\n    MatChipInput.prototype._isSeparatorKey = function (event) {\n        if (hasModifierKey(event)) {\n            return false;\n        }\n        var separators = this.separatorKeyCodes;\n        var keyCode = event.keyCode;\n        return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n    };\n    MatChipInput.decorators = [\n        { type: Directive, args: [{\n                    selector: 'input[matChipInputFor]',\n                    exportAs: 'matChipInput, matChipInputFor',\n                    host: {\n                        'class': 'mat-chip-input mat-input-element',\n                        '(keydown)': '_keydown($event)',\n                        '(blur)': '_blur()',\n                        '(focus)': '_focus()',\n                        '(input)': '_onInput()',\n                        '[id]': 'id',\n                        '[attr.disabled]': 'disabled || null',\n                        '[attr.placeholder]': 'placeholder || null',\n                        '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n                        '[attr.aria-required]': '_chipList && _chipList.required || null',\n                    }\n                },] }\n    ];\n    /** @nocollapse */\n    MatChipInput.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: undefined, decorators: [{ type: Inject, args: [MAT_CHIPS_DEFAULT_OPTIONS,] }] }\n    ]; };\n    MatChipInput.propDecorators = {\n        chipList: [{ type: Input, args: ['matChipInputFor',] }],\n        addOnBlur: [{ type: Input, args: ['matChipInputAddOnBlur',] }],\n        separatorKeyCodes: [{ type: Input, args: ['matChipInputSeparatorKeyCodes',] }],\n        chipEnd: [{ type: Output, args: ['matChipInputTokenEnd',] }],\n        placeholder: [{ type: Input }],\n        id: [{ type: Input }],\n        disabled: [{ type: Input }]\n    };\n    return MatChipInput;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar CHIP_DECLARATIONS = [\n    MatChipList,\n    MatChip,\n    MatChipInput,\n    MatChipRemove,\n    MatChipAvatar,\n    MatChipTrailingIcon,\n];\nvar ɵ0 = {\n    separatorKeyCodes: [ENTER]\n};\nvar MatChipsModule = /** @class */ (function () {\n    function MatChipsModule() {\n    }\n    MatChipsModule.decorators = [\n        { type: NgModule, args: [{\n                    exports: CHIP_DECLARATIONS,\n                    declarations: CHIP_DECLARATIONS,\n                    providers: [\n                        ErrorStateMatcher,\n                        {\n                            provide: MAT_CHIPS_DEFAULT_OPTIONS,\n                            useValue: ɵ0\n                        }\n                    ]\n                },] }\n    ];\n    return MatChipsModule;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_CHIPS_DEFAULT_OPTIONS, MatChip, MatChipAvatar, MatChipInput, MatChipList, MatChipListChange, MatChipRemove, MatChipSelectionChange, MatChipTrailingIcon, MatChipsModule, ɵ0 };\n//# sourceMappingURL=chips.js.map\n","import { InjectionToken, forwardRef, EventEmitter, Directive, ChangeDetectorRef, Output, ContentChildren, Input, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, ElementRef, Inject, ViewChild, NgModule } from '@angular/core';\nimport { mixinDisableRipple, mixinTabIndex, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { __extends } from 'tslib';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar MAT_RADIO_DEFAULT_OPTIONS = new InjectionToken('mat-radio-default-options', {\n    providedIn: 'root',\n    factory: MAT_RADIO_DEFAULT_OPTIONS_FACTORY\n});\nfunction MAT_RADIO_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        color: 'accent'\n    };\n}\n// Increasing integer for generating unique ids for radio components.\nvar nextUniqueId = 0;\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nvar MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return MatRadioGroup; }),\n    multi: true\n};\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nvar MatRadioChange = /** @class */ (function () {\n    function MatRadioChange(\n    /** The MatRadioButton that emits the change event. */\n    source, \n    /** The value of the MatRadioButton. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n    return MatRadioChange;\n}());\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\nvar MatRadioGroup = /** @class */ (function () {\n    function MatRadioGroup(_changeDetector) {\n        this._changeDetector = _changeDetector;\n        /** Selected value for the radio group. */\n        this._value = null;\n        /** The HTML name attribute applied to radio buttons in this group. */\n        this._name = \"mat-radio-group-\" + nextUniqueId++;\n        /** The currently selected radio button. Should match value. */\n        this._selected = null;\n        /** Whether the `value` has been set to its initial value. */\n        this._isInitialized = false;\n        /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n        this._labelPosition = 'after';\n        /** Whether the radio group is disabled. */\n        this._disabled = false;\n        /** Whether the radio group is required. */\n        this._required = false;\n        /** The method to be called in order to update ngModel */\n        this._controlValueAccessorChangeFn = function () { };\n        /**\n         * onTouch function registered via registerOnTouch (ControlValueAccessor).\n         * @docs-private\n         */\n        this.onTouched = function () { };\n        /**\n         * Event emitted when the group value changes.\n         * Change events are only emitted when the value changes due to user interaction with\n         * a radio button (the same behavior as `<input type-\"radio\">`).\n         */\n        this.change = new EventEmitter();\n    }\n    Object.defineProperty(MatRadioGroup.prototype, \"name\", {\n        /** Name of the radio button group. All radio buttons inside this group will use this name. */\n        get: function () { return this._name; },\n        set: function (value) {\n            this._name = value;\n            this._updateRadioButtonNames();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatRadioGroup.prototype, \"labelPosition\", {\n        /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n        get: function () {\n            return this._labelPosition;\n        },\n        set: function (v) {\n            this._labelPosition = v === 'before' ? 'before' : 'after';\n            this._markRadiosForCheck();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatRadioGroup.prototype, \"value\", {\n        /**\n         * Value for the radio-group. Should equal the value of the selected radio button if there is\n         * a corresponding radio button with a matching value. If there is not such a corresponding\n         * radio button, this value persists to be applied in case a new radio button is added with a\n         * matching value.\n         */\n        get: function () { return this._value; },\n        set: function (newValue) {\n            if (this._value !== newValue) {\n                // Set this before proceeding to ensure no circular loop occurs with selection.\n                this._value = newValue;\n                this._updateSelectedRadioFromValue();\n                this._checkSelectedRadioButton();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    MatRadioGroup.prototype._checkSelectedRadioButton = function () {\n        if (this._selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    };\n    Object.defineProperty(MatRadioGroup.prototype, \"selected\", {\n        /**\n         * The currently selected radio button. If set to a new radio button, the radio group value\n         * will be updated to match the new selected button.\n         */\n        get: function () { return this._selected; },\n        set: function (selected) {\n            this._selected = selected;\n            this.value = selected ? selected.value : null;\n            this._checkSelectedRadioButton();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatRadioGroup.prototype, \"disabled\", {\n        /** Whether the radio group is disabled */\n        get: function () { return this._disabled; },\n        set: function (value) {\n            this._disabled = coerceBooleanProperty(value);\n            this._markRadiosForCheck();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatRadioGroup.prototype, \"required\", {\n        /** Whether the radio group is required */\n        get: function () { return this._required; },\n        set: function (value) {\n            this._required = coerceBooleanProperty(value);\n            this._markRadiosForCheck();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     */\n    MatRadioGroup.prototype.ngAfterContentInit = function () {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the MatRadioGroup.\n        this._isInitialized = true;\n    };\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     */\n    MatRadioGroup.prototype._touch = function () {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    };\n    MatRadioGroup.prototype._updateRadioButtonNames = function () {\n        var _this = this;\n        if (this._radios) {\n            this._radios.forEach(function (radio) {\n                radio.name = _this.name;\n                radio._markForCheck();\n            });\n        }\n    };\n    /** Updates the `selected` radio button from the internal _value state. */\n    MatRadioGroup.prototype._updateSelectedRadioFromValue = function () {\n        var _this = this;\n        // If the value already matches the selected radio, do nothing.\n        var isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n        if (this._radios && !isAlreadySelected) {\n            this._selected = null;\n            this._radios.forEach(function (radio) {\n                radio.checked = _this.value === radio.value;\n                if (radio.checked) {\n                    _this._selected = radio;\n                }\n            });\n        }\n    };\n    /** Dispatch change event with current selection and group value. */\n    MatRadioGroup.prototype._emitChangeEvent = function () {\n        if (this._isInitialized) {\n            this.change.emit(new MatRadioChange(this._selected, this._value));\n        }\n    };\n    MatRadioGroup.prototype._markRadiosForCheck = function () {\n        if (this._radios) {\n            this._radios.forEach(function (radio) { return radio._markForCheck(); });\n        }\n    };\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value\n     */\n    MatRadioGroup.prototype.writeValue = function (value) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    };\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    MatRadioGroup.prototype.registerOnChange = function (fn) {\n        this._controlValueAccessorChangeFn = fn;\n    };\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    MatRadioGroup.prototype.registerOnTouched = function (fn) {\n        this.onTouched = fn;\n    };\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param isDisabled Whether the control should be disabled.\n     */\n    MatRadioGroup.prototype.setDisabledState = function (isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetector.markForCheck();\n    };\n    MatRadioGroup.decorators = [\n        { type: Directive, args: [{\n                    selector: 'mat-radio-group',\n                    exportAs: 'matRadioGroup',\n                    providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n                    host: {\n                        'role': 'radiogroup',\n                        'class': 'mat-radio-group',\n                    },\n                },] }\n    ];\n    /** @nocollapse */\n    MatRadioGroup.ctorParameters = function () { return [\n        { type: ChangeDetectorRef }\n    ]; };\n    MatRadioGroup.propDecorators = {\n        change: [{ type: Output }],\n        _radios: [{ type: ContentChildren, args: [forwardRef(function () { return MatRadioButton; }), { descendants: true },] }],\n        color: [{ type: Input }],\n        name: [{ type: Input }],\n        labelPosition: [{ type: Input }],\n        value: [{ type: Input }],\n        selected: [{ type: Input }],\n        disabled: [{ type: Input }],\n        required: [{ type: Input }]\n    };\n    return MatRadioGroup;\n}());\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nvar MatRadioButtonBase = /** @class */ (function () {\n    function MatRadioButtonBase(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n    return MatRadioButtonBase;\n}());\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nvar _MatRadioButtonMixinBase = mixinDisableRipple(mixinTabIndex(MatRadioButtonBase));\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\nvar MatRadioButton = /** @class */ (function (_super) {\n    __extends(MatRadioButton, _super);\n    function MatRadioButton(radioGroup, elementRef, _changeDetector, _focusMonitor, _radioDispatcher, _animationMode, _providerOverride) {\n        var _this = _super.call(this, elementRef) || this;\n        _this._changeDetector = _changeDetector;\n        _this._focusMonitor = _focusMonitor;\n        _this._radioDispatcher = _radioDispatcher;\n        _this._animationMode = _animationMode;\n        _this._providerOverride = _providerOverride;\n        _this._uniqueId = \"mat-radio-\" + ++nextUniqueId;\n        /** The unique ID for the radio button. */\n        _this.id = _this._uniqueId;\n        /**\n         * Event emitted when the checked state of this radio button changes.\n         * Change events are only emitted when the value changes due to user interaction with\n         * the radio button (the same behavior as `<input type-\"radio\">`).\n         */\n        _this.change = new EventEmitter();\n        /** Whether this radio is checked. */\n        _this._checked = false;\n        /** Value assigned to this radio. */\n        _this._value = null;\n        /** Unregister function for _radioDispatcher */\n        _this._removeUniqueSelectionListener = function () { };\n        // Assertions. Ideally these should be stripped out by the compiler.\n        // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n        _this.radioGroup = radioGroup;\n        _this._removeUniqueSelectionListener =\n            _radioDispatcher.listen(function (id, name) {\n                if (id !== _this.id && name === _this.name) {\n                    _this.checked = false;\n                }\n            });\n        return _this;\n    }\n    Object.defineProperty(MatRadioButton.prototype, \"checked\", {\n        /** Whether this radio button is checked. */\n        get: function () { return this._checked; },\n        set: function (value) {\n            var newCheckedState = coerceBooleanProperty(value);\n            if (this._checked !== newCheckedState) {\n                this._checked = newCheckedState;\n                if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n                    this.radioGroup.selected = this;\n                }\n                else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n                    // When unchecking the selected radio button, update the selected radio\n                    // property on the group.\n                    this.radioGroup.selected = null;\n                }\n                if (newCheckedState) {\n                    // Notify all radio buttons with the same name to un-check.\n                    this._radioDispatcher.notify(this.id, this.name);\n                }\n                this._changeDetector.markForCheck();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatRadioButton.prototype, \"value\", {\n        /** The value of this radio button. */\n        get: function () { return this._value; },\n        set: function (value) {\n            if (this._value !== value) {\n                this._value = value;\n                if (this.radioGroup !== null) {\n                    if (!this.checked) {\n                        // Update checked when the value changed to match the radio group's value\n                        this.checked = this.radioGroup.value === value;\n                    }\n                    if (this.checked) {\n                        this.radioGroup.selected = this;\n                    }\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatRadioButton.prototype, \"labelPosition\", {\n        /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n        get: function () {\n            return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n        },\n        set: function (value) {\n            this._labelPosition = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatRadioButton.prototype, \"disabled\", {\n        /** Whether the radio button is disabled. */\n        get: function () {\n            return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n        },\n        set: function (value) {\n            this._setDisabled(coerceBooleanProperty(value));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatRadioButton.prototype, \"required\", {\n        /** Whether the radio button is required. */\n        get: function () {\n            return this._required || (this.radioGroup && this.radioGroup.required);\n        },\n        set: function (value) {\n            this._required = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatRadioButton.prototype, \"color\", {\n        /** Theme color of the radio button. */\n        get: function () {\n            return this._color ||\n                (this.radioGroup && this.radioGroup.color) ||\n                this._providerOverride && this._providerOverride.color || 'accent';\n        },\n        set: function (newValue) { this._color = newValue; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatRadioButton.prototype, \"inputId\", {\n        /** ID of the native input element inside `<mat-radio-button>` */\n        get: function () { return (this.id || this._uniqueId) + \"-input\"; },\n        enumerable: true,\n        configurable: true\n    });\n    /** Focuses the radio button. */\n    MatRadioButton.prototype.focus = function (options) {\n        this._focusMonitor.focusVia(this._inputElement, 'keyboard', options);\n    };\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     */\n    MatRadioButton.prototype._markForCheck = function () {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n    };\n    MatRadioButton.prototype.ngOnInit = function () {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n    };\n    MatRadioButton.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        this._focusMonitor\n            .monitor(this._elementRef, true)\n            .subscribe(function (focusOrigin) {\n            if (!focusOrigin && _this.radioGroup) {\n                _this.radioGroup._touch();\n            }\n        });\n    };\n    MatRadioButton.prototype.ngOnDestroy = function () {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        this._removeUniqueSelectionListener();\n    };\n    /** Dispatch change event with current value. */\n    MatRadioButton.prototype._emitChangeEvent = function () {\n        this.change.emit(new MatRadioChange(this, this._value));\n    };\n    MatRadioButton.prototype._isRippleDisabled = function () {\n        return this.disableRipple || this.disabled;\n    };\n    MatRadioButton.prototype._onInputClick = function (event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `radio-button` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    };\n    /**\n     * Triggered when the radio button received a click or the input recognized any change.\n     * Clicking on a label element, will trigger a change event on the associated input.\n     */\n    MatRadioButton.prototype._onInputChange = function (event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n        var groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n        this.checked = true;\n        this._emitChangeEvent();\n        if (this.radioGroup) {\n            this.radioGroup._controlValueAccessorChangeFn(this.value);\n            if (groupValueChanged) {\n                this.radioGroup._emitChangeEvent();\n            }\n        }\n    };\n    /** Sets the disabled state and marks for check if a change occurred. */\n    MatRadioButton.prototype._setDisabled = function (value) {\n        if (this._disabled !== value) {\n            this._disabled = value;\n            this._changeDetector.markForCheck();\n        }\n    };\n    MatRadioButton.decorators = [\n        { type: Component, args: [{\n                    selector: 'mat-radio-button',\n                    template: \"<!-- TODO(jelbourn): render the radio on either side of the content -->\\n<!-- TODO(mtlin): Evaluate trade-offs of using native radio vs. cost of additional bindings. -->\\n<label [attr.for]=\\\"inputId\\\" class=\\\"mat-radio-label\\\" #label>\\n  <!-- The actual 'radio' part of the control. -->\\n  <div class=\\\"mat-radio-container\\\">\\n    <div class=\\\"mat-radio-outer-circle\\\"></div>\\n    <div class=\\\"mat-radio-inner-circle\\\"></div>\\n    <input #input class=\\\"mat-radio-input cdk-visually-hidden\\\" type=\\\"radio\\\"\\n        [id]=\\\"inputId\\\"\\n        [checked]=\\\"checked\\\"\\n        [disabled]=\\\"disabled\\\"\\n        [tabIndex]=\\\"tabIndex\\\"\\n        [attr.name]=\\\"name\\\"\\n        [attr.value]=\\\"value\\\"\\n        [required]=\\\"required\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n        [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n        (change)=\\\"_onInputChange($event)\\\"\\n        (click)=\\\"_onInputClick($event)\\\">\\n\\n    <!-- The ripple comes after the input so that we can target it with a CSS\\n         sibling selector when the input is focused. -->\\n    <div mat-ripple class=\\\"mat-radio-ripple mat-focus-indicator\\\"\\n         [matRippleTrigger]=\\\"label\\\"\\n         [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n         [matRippleCentered]=\\\"true\\\"\\n         [matRippleRadius]=\\\"20\\\"\\n         [matRippleAnimation]=\\\"{enterDuration: 150}\\\">\\n\\n      <div class=\\\"mat-ripple-element mat-radio-persistent-ripple\\\"></div>\\n    </div>\\n  </div>\\n\\n  <!-- The label content for radio control. -->\\n  <div class=\\\"mat-radio-label-content\\\" [class.mat-radio-label-before]=\\\"labelPosition == 'before'\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </div>\\n</label>\\n\",\n                    inputs: ['disableRipple', 'tabIndex'],\n                    encapsulation: ViewEncapsulation.None,\n                    exportAs: 'matRadioButton',\n                    host: {\n                        'class': 'mat-radio-button',\n                        '[class.mat-radio-checked]': 'checked',\n                        '[class.mat-radio-disabled]': 'disabled',\n                        '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                        '[class.mat-primary]': 'color === \"primary\"',\n                        '[class.mat-accent]': 'color === \"accent\"',\n                        '[class.mat-warn]': 'color === \"warn\"',\n                        // Needs to be -1 so the `focus` event still fires.\n                        '[attr.tabindex]': '-1',\n                        '[attr.id]': 'id',\n                        '[attr.aria-label]': 'null',\n                        '[attr.aria-labelledby]': 'null',\n                        '[attr.aria-describedby]': 'null',\n                        // Note: under normal conditions focus shouldn't land on this element, however it may be\n                        // programmatically set, for example inside of a focus trap, in this case we want to forward\n                        // the focus to the native element.\n                        '(focus)': '_inputElement.nativeElement.focus()',\n                    },\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    styles: [\".mat-radio-button{display:inline-block;-webkit-tap-highlight-color:transparent;outline:0}.mat-radio-label{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;display:inline-flex;align-items:center;white-space:nowrap;vertical-align:middle;width:100%}.mat-radio-container{box-sizing:border-box;display:inline-block;position:relative;width:20px;height:20px;flex-shrink:0}.mat-radio-outer-circle{box-sizing:border-box;height:20px;left:0;position:absolute;top:0;transition:border-color ease 280ms;width:20px;border-width:2px;border-style:solid;border-radius:50%}._mat-animation-noopable .mat-radio-outer-circle{transition:none}.mat-radio-inner-circle{border-radius:50%;box-sizing:border-box;height:20px;left:0;position:absolute;top:0;transition:transform ease 280ms,background-color ease 280ms;width:20px;transform:scale(0.001)}._mat-animation-noopable .mat-radio-inner-circle{transition:none}.mat-radio-checked .mat-radio-inner-circle{transform:scale(0.5)}.cdk-high-contrast-active .mat-radio-checked .mat-radio-inner-circle{border:solid 10px}.mat-radio-label-content{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto;display:inline-block;order:0;line-height:inherit;padding-left:8px;padding-right:0}[dir=rtl] .mat-radio-label-content{padding-right:8px;padding-left:0}.mat-radio-label-content.mat-radio-label-before{order:-1;padding-left:0;padding-right:8px}[dir=rtl] .mat-radio-label-content.mat-radio-label-before{padding-right:0;padding-left:8px}.mat-radio-disabled,.mat-radio-disabled .mat-radio-label{cursor:default}.mat-radio-button .mat-radio-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-radio-button .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple){opacity:.16}.mat-radio-persistent-ripple{width:100%;height:100%;transform:none}.mat-radio-container:hover .mat-radio-persistent-ripple{opacity:.04}.mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-persistent-ripple,.mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-persistent-ripple{opacity:.12}.mat-radio-persistent-ripple,.mat-radio-disabled .mat-radio-container:hover .mat-radio-persistent-ripple{opacity:0}@media(hover: none){.mat-radio-container:hover .mat-radio-persistent-ripple{display:none}}.mat-radio-input{bottom:0;left:50%}.cdk-high-contrast-active .mat-radio-disabled{opacity:.5}\\n\"]\n                }] }\n    ];\n    /** @nocollapse */\n    MatRadioButton.ctorParameters = function () { return [\n        { type: MatRadioGroup, decorators: [{ type: Optional }] },\n        { type: ElementRef },\n        { type: ChangeDetectorRef },\n        { type: FocusMonitor },\n        { type: UniqueSelectionDispatcher },\n        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RADIO_DEFAULT_OPTIONS,] }] }\n    ]; };\n    MatRadioButton.propDecorators = {\n        id: [{ type: Input }],\n        name: [{ type: Input }],\n        ariaLabel: [{ type: Input, args: ['aria-label',] }],\n        ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n        ariaDescribedby: [{ type: Input, args: ['aria-describedby',] }],\n        checked: [{ type: Input }],\n        value: [{ type: Input }],\n        labelPosition: [{ type: Input }],\n        disabled: [{ type: Input }],\n        required: [{ type: Input }],\n        color: [{ type: Input }],\n        change: [{ type: Output }],\n        _inputElement: [{ type: ViewChild, args: ['input',] }]\n    };\n    return MatRadioButton;\n}(_MatRadioButtonMixinBase));\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar MatRadioModule = /** @class */ (function () {\n    function MatRadioModule() {\n    }\n    MatRadioModule.decorators = [\n        { type: NgModule, args: [{\n                    imports: [MatRippleModule, MatCommonModule],\n                    exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n                    declarations: [MatRadioGroup, MatRadioButton],\n                },] }\n    ];\n    return MatRadioModule;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_RADIO_DEFAULT_OPTIONS, MAT_RADIO_DEFAULT_OPTIONS_FACTORY, MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR, MatRadioButton, MatRadioChange, MatRadioGroup, MatRadioModule };\n//# sourceMappingURL=radio.js.map\n","import { Directive, EventEmitter, HostListener, OnDestroy, OnInit, Output } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { debounceTime, distinctUntilChanged } from 'rxjs/internal/operators';\n\n@Directive({\n  selector: '[ppEmitOnChange]'\n})\nexport class EmitEventOnKeyupDirective implements OnInit, OnDestroy {\n\n  constructor() {\n  }\n  @Output('onKeyup') keyUpEventEmitter = new EventEmitter<any>();\n\n  private clicks = new Subject();\n\n  ngOnInit(): void {\n    // delay trigggering click events and don't trigger it if nothing changed\n    this.clicks.pipe(\n      debounceTime(1000),\n      distinctUntilChanged()\n    ).subscribe((e) => {\n      this.keyUpEventEmitter.emit(e);\n    });\n  }\n\n\n  @HostListener('window:keyup', ['$event'])\n  keyEvent(event: KeyboardEvent) {\n    event.preventDefault();\n    event.stopPropagation();\n    this.clicks.next(event);\n  }\n\n  ngOnDestroy(): void {\n    this.clicks.unsubscribe();\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { AbstractControl, ValidatorFn } from '@angular/forms';\nimport { UriConverter } from '../util/uri-converter';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ValidationService {\n\n\n  constructor() {\n  }\n\n\n  static getMessageForError(section, keyError, errorValue): string {\n    if (keyError === 'required') {\n      return section + ': This value is required';\n    }\n    if (keyError === 'xsdImage') {\n\n      return section + ': Please follow this patterns: ![](http://) and enter a valid url in the round brackets';\n    }\n    if (keyError === 'xsdInteger') {\n      return section + ': Please enter an integer.';\n    }\n\n    if( keyError === 'xsdAnyURI') {\n\n      return section + ': Please enter a valid URL/URL.';\n    }\n    if (keyError === 'minlength') {\n      return section + ': Please enter only ' + errorValue['requiredLength'] + ' entries';\n    }\n    if (keyError === 'maxlength') {\n      return section + ': Please enter max. ' + errorValue['requiredLength'] + ' entries';\n    }\n  }\n\n\n\n  // checks if value is an array of strings matching the markdown image patterns (e.g. [![test](http://placekitten.com/200/300), ![](http://any.valid.url.com)]\n  static xsdImage(): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: boolean } | null => {\n      if (control.value !== undefined) {\n        if (!this.allValuesMatchRegex(control.value, /!\\[.*\\]\\(http(s)?:\\/\\/([a-zA-Z.0-9]+[\\/]*)+\\)/g)) {\n          return {'xsdImage': true};\n        }\n      }\n      return null;\n    };\n  }\n\n  // checks if value is an array of strings matching the markdown image patterns (e.g. [![test](http://placekitten.com/200/300), ![](http://any.valid.url.com)]\n  static xsdInteger(): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: boolean } | null => {\n      if (control.value !== undefined) {\n        let arrayOfImageValues = control.value;\n        if (!(arrayOfImageValues instanceof Array)) {\n          arrayOfImageValues = [arrayOfImageValues];\n        }\n        for (const item of arrayOfImageValues) {\n          if (isNaN(+item)) {\n            return {'xsdInteger': true};\n          }\n        }\n      }\n      return null;\n    };\n  }\n\n  // checks if value is an array of strings matching the markdown url patterns (e.g. [[test](http://placekitten.com/200/300), [](http://any.valid.url.com)]\n  static xsdAnyURI(): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: boolean } | null => {\n      if (control.value !== undefined) {\n        if (!this.allValuesMatchRegex(control.value, /\\[.*\\]\\(http:\\/\\/([a-zA-Z.0-9]+[\\/]*)+\\)/g)) {\n          return {'xsdAnyURI': true};\n        }\n      }\n      return null;\n    };\n  }\n\n  static startsWithValidPrefix(allowedPrefixes: string[]): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: boolean } | null => {\n      if (control.value !== undefined) {\n        if (control.value.indexOf(':') === -1) {\n          return {'startsWithValidPrefix': true};\n        }\n        const prefix = control.value.trim().substring(0, control.value.indexOf(':'));\n        if (allowedPrefixes.findIndex(it => it === prefix) === -1) {\n          return {'startsWithValidPrefix': true};\n        }\n      }\n      return null;\n    };\n  }\n\n\n  private static allValuesMatchRegex(array: any, regex) {\n    let arrayOfImageValues = array;\n    if (!(arrayOfImageValues instanceof Array)) {\n      arrayOfImageValues = [arrayOfImageValues];\n    }\n    for (const stringItem of arrayOfImageValues) {\n      const item = stringItem.startsWith('* ') ? stringItem.substr(2) : stringItem;\n      if (!item || UriConverter.removeWhitespace(item).length === 0) {\n        continue;\n      }\n      if (!item.match(regex)) {\n        continue;\n      }\n      const match = item.match(regex);\n      if (match.length < item.trim().length) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatButtonModule} from '@angular/material/button';\n\n@NgModule({\n    declarations: [],\n    imports: [\n        CommonModule,\n        MatButtonModule\n    ],\n    exports: [],\n    entryComponents: []\n})\nexport class GraphModule {\n}\n","<pp-navigate-back></pp-navigate-back>\n<h2>\n  Add a new pattern to {{patternLanguage?.name}}\n</h2>\n<div mat-dialog-content [formGroup]=\"iconForm\" style=\"width: 100%\">\n  <div fxLayout=\"column\">\n    <mat-card fxLayout=\"column\" fxLayoutAlign=\"space-around\">\n      <div fxLayout=\"row\">\n        <mat-form-field class=\"full-width\" appearance=\"outline\" style=\"width: 24em\" [floatLabel]=\"'always'\">\n          <mat-label>Icon URL</mat-label>\n          <input matInput formControlName=\"iconUrl\" placeholder=\"Enter URL of Icon\" type=\"url\">\n          <div fxLayout=\"row\" fxLayoutAlign=\"space-around center\" *ngIf=\"iconPreviewVisible\">\n            <span class=\"label-preview\">Icon-Preview: </span>\n            <div mat-card-avatar #iconPreview\n                 [ngStyle]=\"{ 'background-image': 'url(' + iconUrl?.value + ')'}\"\n                 class=\"example-header-image\"></div>\n          </div>\n          <mat-error *ngIf=\"wasSaveButtonClicked && iconUrl?.hasError('pattern')\">Please insert a valid URL.\n          </mat-error>\n        </mat-form-field>\n      </div>\n\n      <div class=\"parent \">\n\n        <div class=\"item editor-preview-container\">\n          <td-text-editor ppEmitOnChange (onKeyup)=\"onChangeMarkdownText()\" class=\"markdownEditor\"\n                          [(value)]=\"previousTextEditorValue\" [options]=\"options\"\n                          #textEditor\n                          id=\"textEditor\"></td-text-editor>\n        </div>\n\n        <div class=\"item last\">\n\n          <div id=\"preview\"></div>\n\n          <mat-error *ngIf=\"wasSaveButtonClicked && errorMessages\">Found errors in the following sections:\n            <div *ngFor=\"let message of errorMessages\">\n              <span>{{message}}<br></span>\n            </div>\n          </mat-error>\n\n        </div>\n      </div>\n    </mat-card>\n  </div>\n</div>\n<button [disabled]=\"iconUrl?.hasError('pattern')\" (click)=\"save()\" class=\"save-button\" mat-raised-button color=\"primary\" style=\"float: right\"><i\n  class=\"material-icons\">save</i>Save\n</button>\n","import {ChangeDetectorRef, Component, NgZone, OnInit, ViewChild} from '@angular/core';\nimport {TdTextEditorComponent} from '@covalent/text-editor';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport * as marked from 'marked';\nimport {TokensList} from 'marked';\nimport Pattern from '../../core/model/pattern.model';\nimport {ToasterService} from 'angular2-toaster';\nimport {AbstractControl, FormBuilder, FormControl, FormGroup, ValidationErrors, Validators} from '@angular/forms';\nimport {ValidationService} from '../../core/service/validation.service';\nimport {PatternLanguageService} from '../../core/service/pattern-language.service';\nimport PatternLanguage from '../../core/model/hal/pattern-language.model';\nimport PatternSectionSchema from '../../core/model/hal/pattern-section-schema.model';\nimport * as MarkdownIt from 'markdown-it';\nimport * as markdownitKatex from 'markdown-it-katex';\nimport {PatternService} from '../../core/service/pattern.service';\nimport {debounceTime, distinctUntilChanged} from 'rxjs/internal/operators';\n\n\n@Component({\n    selector: 'pp-create-pattern',\n    templateUrl: './create-pattern.component.html',\n    styleUrls: ['./create-pattern.component.scss']\n})\nexport class CreatePatternComponent implements OnInit {\n\n    iconForm: FormGroup;\n    patterns: Array<Pattern>;\n    patternLanguageId: string;\n    iconPreviewVisible = false;\n    wasSaveButtonClicked = false;\n    patternValuesFormGroup: FormGroup;\n    previousTextEditorValue = `# Pattern name`;\n    options: any = {\n        // todo: hide the preview button because it forces fullscreen mode (and destroys our page layout)\n    };\n    errorMessages: Array<string>;\n    patternLanguage: PatternLanguage;\n    @ViewChild('textEditor') private _textEditor: TdTextEditorComponent;\n    private sections: Array<string>;\n    private markdown;\n    private patternName: string;\n\n    constructor(private activatedRoute: ActivatedRoute,\n                private cdr: ChangeDetectorRef,\n                private toastService: ToasterService,\n                private patternLanguageService: PatternLanguageService,\n                private patternService: PatternService,\n                private router: Router,\n                private zone: NgZone,\n                private _fb: FormBuilder) {\n    }\n\n    get iconUrl(): AbstractControl {\n        return this.iconForm.get('iconUrl');\n    }\n\n    static isListItem(i: number, sectionIndex: number, lines: marked.TokensList): boolean {\n        for (let index = sectionIndex + 1; index < i; index++) {\n            if (lines[index].type === 'list_item_start') {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    // noinspection TsLint\n    ngOnInit() {\n        this.patternLanguageId = this.activatedRoute.snapshot.paramMap.get('patternLanguageId');\n        this.markdown = new MarkdownIt();\n        this.markdown.use(markdownitKatex);\n\n        this.patternLanguageService.getPatternLanguageByID(this.patternLanguageId).subscribe((pl: PatternLanguage) => {\n            this.patternLanguage = pl;\n            this.sections = this.patternLanguage.patternSchema ?\n                this.patternLanguage.patternSchema.patternSectionSchemas.map((schema: PatternSectionSchema) => schema.label) : [];\n            this.initTextEditor();\n            this.initFormGroup();\n        });\n\n        const urlRegex = /\\b((?:[a-z][\\w-]+:(?:\\/{1,3}|[a-z0-9%])|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}\\/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:'\".,<>?«»“”‘’]))/i;\n        this.iconForm = this._fb.group({\n            iconUrl: ['', [Validators.pattern(urlRegex)]]\n        });\n\n        this.iconUrl.valueChanges.pipe(debounceTime(1000), distinctUntilChanged()).subscribe((urlValue) => {\n            this.iconPreviewVisible = urlValue && (urlValue.startsWith('https://') || urlValue.startsWith('http://'));\n        });\n    }\n\n    save(): void {\n        this.parsePatternInput();\n\n        this.wasSaveButtonClicked = true;\n        if (this.patternValuesFormGroup && !this.patternValuesFormGroup.valid) {\n            console.log('pattern entries not valid');\n            this.updateFormValidationErrors();\n            return;\n        }\n        // We send null as uri and let the backend create proper uris, which include camel cased names of patterns\n        this.patternService.savePattern(this.patternLanguage._links.patterns.href,\n            {\n                uri: null,\n                name: this.patternName,\n                content: this.patternValuesFormGroup.value,\n                iconUrl: this.iconForm.value.iconUrl\n            }\n        ).subscribe(() => {\n                this.toastService.pop('success', 'Pattern successfully created');\n                this.zone.run(() => {\n                    this.router.navigate(['..'], {relativeTo: this.activatedRoute});\n                });\n            },\n            (error) => this.toastService.pop('error', 'Could not create Pattern', error.message)\n        );\n\n    }\n\n    parseMarkdownText(): TokensList {\n        return marked.lexer(this._textEditor.value);\n    }\n\n    onChangeMarkdownText(): void {\n        const currentText = this.parseMarkdownText();\n        if (this.invalidTextEdit(currentText)) {\n            // TODO\n        }\n        if (this.markdown) {\n            document.getElementById('preview').innerHTML = this.markdown.render(this._textEditor.value);\n        }\n    }\n\n    ignoreCaseAndWhitespace(text: string): string {\n        return text.trim().replace(new RegExp('/s', 'g'), '').toLowerCase();\n    }\n\n    addSpaceForCamelCase(text: string): string {\n        return text.replace(/([a-z])([A-Z])/g, '$1 $2');\n    }\n\n    getDefaultTextForSection(section: string): string {\n        return 'Enter your input for this section here.';\n    }\n\n    updateFormValidationErrors(): string {\n        if (this.patternValuesFormGroup.valid) {\n            return '';\n        }\n        this.errorMessages = [];\n        Object.keys(this.patternValuesFormGroup.controls).forEach(key => {\n            const controlErrors: ValidationErrors = this.patternValuesFormGroup.controls[key].errors;\n            if (controlErrors != null) {\n                Object.keys(controlErrors).forEach(keyError => {\n                    this.errorMessages.push(ValidationService.getMessageForError(key, keyError, controlErrors[keyError]));\n                });\n            }\n        });\n    }\n\n    // returns if a user changed the value of the sections headers (which he is not allowed to do)\n    private invalidTextEdit(currentText: marked.TokensList): boolean {\n        if (!this.sections) {\n            return false;\n        }\n        // we should find a corresponding line (= that starts with ## followed by section patternName) for each section\n        for (const section of this.sections) {\n            const indexOfCorrespondingLine = currentText.findIndex(line =>\n                (line.type === 'heading' && line.depth === 2) &&\n                this.ignoreCaseAndWhitespace(line.text) ===\n                this.ignoreCaseAndWhitespace(this.addSpaceForCamelCase(section))\n            );\n            if (indexOfCorrespondingLine === -1) {\n                return true;\n            }\n        }\n        // there should be only one name (= line that starts with # )\n        return !(currentText.filter(it => it.type === 'heading' && it.depth === 1).length === 1) ||\n            // there should be as many second headings as sections (= line that starts with # )\n            !(currentText.filter(it => it.type === 'heading' && it.depth === 2).length === this.sections.length);\n    }\n\n    private parsePatternInput(): void {\n        const lines = this.parseMarkdownText();\n        const patternNameIndex = lines.findIndex((it) => it.type === 'heading' && it.depth === 1);\n        this.patternName = patternNameIndex !== -1 ? lines[patternNameIndex]['text'] : '';\n        this.patternLanguage.patternSchema.patternSectionSchemas.forEach((schema: PatternSectionSchema) => {\n            const sectionName = schema.name;\n            const sectionIndex = lines.findIndex((sec) => sec.type === 'heading' && sec.depth === 2 &&\n                this.ignoreCaseAndWhitespace(sec.text) === this.ignoreCaseAndWhitespace(this.addSpaceForCamelCase(sectionName)));\n            if (sectionIndex !== -1) {\n                const sectionContent = [];\n                for (let i = sectionIndex + 1; i < lines.length; i++) {\n                    if (lines[i].type === 'heading') {\n                        break;\n                    }\n                    if (lines[i]['text']) {\n                        // if a list item was parsed before, add it to the text\n                        sectionContent.push(i > 0 && CreatePatternComponent.isListItem(i, sectionIndex, lines) ? '* ' + lines[i]['text'] : lines[i]['text']);\n                    }\n                }\n                if (this.patternValuesFormGroup) {\n                    if (this.patternValuesFormGroup.controls[sectionName]) {\n                        this.patternValuesFormGroup.controls[sectionName].setValue(sectionContent.join('\\n'));\n                    } else {\n                        console.log('missing formcontrol:');\n                        console.log(sectionName);\n                    }\n                } else {\n                    console.error('patternValuesFormGroup is undefined');\n                }\n            }\n        });\n    }\n\n    // init formgroup based on patternschema\n    private initFormGroup() {\n        this.patternValuesFormGroup = new FormGroup({});\n        if (this.patternLanguage && this.patternLanguage.patternSchema && this.patternLanguage.patternSchema.patternSectionSchemas) {\n            this.patternLanguage.patternSchema.patternSectionSchemas.forEach((schema: PatternSectionSchema) => {\n                this.patternValuesFormGroup.addControl(schema.name, new FormControl(''));\n            });\n        }\n    }\n\n    private initTextEditor(): void {\n        for (const section of this.sections) {\n            this.previousTextEditorValue = this.previousTextEditorValue.concat(\n                '\\n ## ' + section + '\\n' + this.getDefaultTextForSection(section));\n        }\n        this._textEditor.value = this.previousTextEditorValue;\n        this.onChangeMarkdownText();\n    }\n}\n","<!-- tab view if there are multiple renderer for the language available -->\n<mat-tab-group *ngIf=\"renderer && renderer.length > 1; else singleRenderer\">\n    <!-- create a new tab for each available renderer -->\n    <mat-tab label=\"{{r.label || 'Tab ' + (i+1)}}\" *ngFor=\"let r of renderer; let i = index\">\n        <mat-card>\n            <ng-template ppPatternContainer [plId]=\"patternLanguageId\" [pId]=\"patternId\" [index]=\"i\">\n      </ng-template>\n        </mat-card>\n    </mat-tab>\n</mat-tab-group>\n\n<!-- else, render everything in a single card -->\n<ng-template #singleRenderer>\n  <mat-card>\n    <ng-template ppPatternContainer [plId]=\"patternLanguageId\" [pId]=\"patternId\"></ng-template>\n    </mat-card>\n</ng-template>\n","import {Component, OnInit} from '@angular/core';\nimport {ActivatedRoute} from '@angular/router';\nimport {ComponentRegistryService} from 'src/app/core/service/component-registry.service';\n\n@Component({\n  selector: 'pp-pattern-container',\n  templateUrl: './pattern-container.component.html',\n  styleUrls: ['./pattern-container.component.scss']\n})\nexport class PatternContainerComponent implements OnInit {\n\n  patternLanguageId: string;\n  patternId: string;\n\n  // the list of registered renderer components for the language\n  renderer: Array<any>;\n\n  constructor(private activatedRoute: ActivatedRoute,\n              private compRegistry: ComponentRegistryService) {\n  }\n\n  ngOnInit() {\n    this.patternLanguageId = this.activatedRoute.snapshot.paramMap.get('patternLanguageId');\n    this.renderer = this.compRegistry.getRenderingComponents(this.patternLanguageId);\n  }\n}\n","import { OnChanges, SimpleChanges, ChangeDetectorRef } from '@angular/core';\n/*\n * Copyright (c) 2018 University of Stuttgart.\n *\n * See the NOTICE file(s) distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0, or the Apache Software License 2.0\n * which is available at https://www.apache.org/licenses/LICENSE-2.0.\n *\n * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n */\n\nimport { ComponentFactoryResolver, Directive, Input, OnInit, ViewContainerRef } from '@angular/core';\nimport { ComponentRegistryService } from '../../core/service/component-registry.service';\nimport { PatternRenderingComponentInterface } from '../../core/model/pattern-rendering-component.interface';\nimport { DefaultPatternRendererComponent } from '../../core/default-pattern-renderer/default-pattern-renderer.component';\n\n@Directive({\n    selector: '[ppPatternContainer]'\n})\nexport class PatternContainerDirective implements OnInit, OnChanges {\n\n  @Input() plId: string;\n  @Input() pId: string;\n\n  @Input() index?: number;\n\n  private ref: PatternRenderingComponentInterface;\n\n  constructor(public viewContainerRef: ViewContainerRef,\n              private componentFactoryResolver: ComponentFactoryResolver,\n              private compRegistry: ComponentRegistryService,\n              private cdr: ChangeDetectorRef) {\n  }\n\n  ngOnInit(): void {\n    this.createContent();\n  }\n\n  private createContent(): void {\n    const renderingComponent = this.compRegistry.getPLRenderingComponents(this.plId, this.index);\n\n    const componentFactory = renderingComponent ?\n    this.componentFactoryResolver.resolveComponentFactory(renderingComponent.pcomponent) :\n    this.componentFactoryResolver.resolveComponentFactory(DefaultPatternRendererComponent);\n\n    this.viewContainerRef.clear();\n    const componentRef = this.viewContainerRef.createComponent(componentFactory);\n    this.ref = (<PatternRenderingComponentInterface>componentRef.instance);\n    this.ref.pId = this.pId;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    // changes of the langauge itself\n    if (changes['plId'] && JSON.stringify(changes['plId'].currentValue) !== JSON.stringify(changes['plId'].previousValue)) {\n      this.createContent();\n      // this.cdr.detectChanges();\n    }\n    // changes of the pattern\n    if (changes['pId']\n      && this.ref\n      && (JSON.stringify(changes['pId'].currentValue) !== JSON.stringify(changes['pId'].previousValue))) {\n        // this.ref.pId = this.pId;\n        this.cdr.detectChanges();\n    }\n  }\n}\n","<!--\n  ~ Copyright (c) 2018 University of Stuttgart.\n  ~\n  ~ See the NOTICE file(s) distributed with this work for additional\n  ~ information regarding copyright ownership.\n  ~\n  ~ This program and the accompanying materials are made available under the\n  ~ terms of the Eclipse Public License 2.0 which is available at\n  ~ http://www.eclipse.org/legal/epl-2.0, or the Apache Software License 2.0\n  ~ which is available at https://www.apache.org/licenses/LICENSE-2.0.\n  ~\n  ~ SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n  -->\n\n<!-- tab view if there are multiple renderers for the language available -->\n<mat-tab-group *ngIf=\"renderer && renderer.length > 1; else oneOrNoRenderer\">\n    <!-- create a new tab for each available renderer -->\n    <mat-tab label=\"{{r.label || 'Tab ' + (i+1)}}\" *ngFor=\"let r of renderer; let i = index\">\n        <mat-card>\n            <ng-template ppPatternLanguageContainer [patternLanguageId]=\"plEncodedId\" [index]=\"i\"></ng-template>\n        </mat-card>\n    </mat-tab>\n</mat-tab-group>\n\n<!-- else, use default renderers -->\n<ng-template #oneOrNoRenderer>\n    <!--If there is only one renderer registered for this pl, use it: -->\n    <ng-template *ngIf=\"renderer\" ppPatternLanguageContainer [patternLanguageId]=\"plEncodedId\"></ng-template>\n\n    <!--If there is no renderer registered for this pl, take the default one -->\n    <ng-template *ngIf=\"!renderer\" #cardsView ppPatternLanguageContainer [patternLanguageId]=\"plEncodedId\">\n    </ng-template>\n</ng-template>\n","/*\n * Copyright (c) 2018 University of Stuttgart.\n *\n * See the NOTICE file(s) distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0, or the Apache Software License 2.0\n * which is available at https://www.apache.org/licenses/LICENSE-2.0.\n *\n * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n */\n\nimport {Component, OnInit} from '@angular/core';\nimport {ActivatedRoute} from '@angular/router';\nimport {ComponentRegistryService} from 'src/app/core/service/component-registry.service';\n\n@Component({\n    selector: 'pp-pattern-language-container',\n    templateUrl: './pattern-language-container.component.html',\n    styleUrls: ['./pattern-language-container.component.scss']\n})\nexport class PatternLanguageContainerComponent implements OnInit {\n\n    // the id of the patterns language\n    plEncodedId: string;\n    // the list of registered renderer components for the language\n    renderer: Array<any>;\n\n    constructor(private activatedRoute: ActivatedRoute,\n                private compRegistry: ComponentRegistryService) {\n    }\n\n    ngOnInit() {\n        // Todo: We use encoded uris just for navigation. Now we can get the Uri from the patternlanguage entity. We have to add redux!\n        this.plEncodedId = this.activatedRoute.snapshot.params['patternLanguageId'];\n        this.renderer = this.compRegistry.getRenderingComponents(this.plEncodedId);\n    }\n}\n","/*\n * Copyright (c) 2018 University of Stuttgart.\n *\n * See the NOTICE file(s) distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0, or the Apache Software License 2.0\n * which is available at https://www.apache.org/licenses/LICENSE-2.0.\n *\n * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n */\n\nimport {ComponentFactoryResolver, Directive, Input, OnInit, ViewContainerRef} from '@angular/core';\nimport {ComponentRegistryService} from '../../core/service/component-registry.service';\nimport {UriConverter} from '../../core/util/uri-converter';\n\n@Directive({\n    selector: '[ppPatternLanguageContainer]'\n})\nexport class PatternLanguageContainerDirective implements OnInit {\n\n    @Input() patternLanguageId: string;\n    @Input() index?: number;\n    @Input() graphView: boolean;\n\n    selectedGraphView: boolean;\n\n    constructor(public viewContainerRef: ViewContainerRef,\n                private componentFactoryResolver: ComponentFactoryResolver,\n                private compRegistry: ComponentRegistryService) {\n    }\n\n    ngOnInit(): void {\n        const componentFactory = this.getRenderingComponent();\n        this.viewContainerRef.clear();\n        const componentRef = this.viewContainerRef.createComponent(componentFactory);\n    }\n\n    private getRenderingComponent() {\n        const renderingComponent = this.compRegistry.getPLRenderingComponents(UriConverter.doubleDecodeUri(this.patternLanguageId.toLowerCase()), this.index);\n        if (renderingComponent) {\n            return this.componentFactoryResolver.resolveComponentFactory(renderingComponent.plcomponent);\n        }\n        // no special renderer, use default renderer:\n        return this.componentFactoryResolver.resolveComponentFactory(this.compRegistry.getPLRenderingComponents('default').plcomponent);\n    }\n}\n","import {GraphModule} from './../graph/graph.module';\nimport {CUSTOM_ELEMENTS_SCHEMA, NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\nimport {PatternLanguageManagementRoutingModule} from './pattern-language-management-routing.module';\nimport {PatternLanguageManagementComponent} from './pattern-language-management/pattern-language-management.component'; // tslint:disable-line:max-line-length\nimport {CoreModule} from '../core/core.module';\nimport {PatternLanguageContainerComponent} from './pattern-language-container/pattern-language-container.component';\nimport {PatternLanguageContainerDirective} from './pattern-language-container/pattern-language-container.directive';\nimport {PatternContainerComponent} from './pattern-container/pattern-container.component';\nimport {PatternContainerDirective} from './pattern-container/pattern-container.directive';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatBadgeModule } from '@angular/material/badge';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport {CreatePatternComponent} from './create-pattern/create-pattern.component';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {FlexLayoutModule} from '@angular/flex-layout';\nimport {ProcessOauthCallbackComponent} from '../core/component/process-oauth-callback/process-oauth-callback.component';\nimport {ToasterModule} from 'angular2-toaster';\nimport {PatternLanguageGraphComponent} from './pattern-language-graph/pattern-language-graph.component';\nimport {DragDropModule} from '@angular/cdk/drag-drop';\nimport {MatListModule} from '@angular/material/list';\nimport {MatRippleModule} from '@angular/material/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n/*\n * Copyright (c) 2018 University of Stuttgart.\n *\n * See the NOTICE file(s) distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0, or the Apache Software License 2.0\n * which is available at https://www.apache.org/licenses/LICENSE-2.0.\n *\n * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n */\n\nexport const PL_ROUTES: Routes = [\n    {\n        path: '',\n        component: PatternLanguageManagementComponent\n    }, {\n        path: ':patternLanguageId',\n        component: PatternLanguageContainerComponent,\n    }, {\n        path: ':patternLanguageId/create-patterns',\n        component: CreatePatternComponent,\n    },\n    {\n        path: ':patternLanguageId/:patternId',\n        component: PatternContainerComponent\n    }\n\n]\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MatBadgeModule,\n        MatButtonModule,\n        MatToolbarModule,\n        MatIconModule,\n        MatSidenavModule,\n        MatCardModule,\n        MatDialogModule,\n        MatTabsModule,\n        MatInputModule,\n        MatChipsModule,\n        MatAutocompleteModule,\n        CoreModule,\n        MatGridListModule,\n        ReactiveFormsModule,\n        FlexLayoutModule,\n        MatSelectModule,\n        MatRadioModule,\n        MatCheckboxModule,\n        ToasterModule,\n        GraphModule,\n        DragDropModule,\n        MatListModule,\n        MatRippleModule,\n        RouterModule.forChild(PL_ROUTES),\n        // PatternLanguageManagementRoutingModule,\n        \n    ],\n    declarations: [\n        PatternLanguageManagementComponent,\n        PatternLanguageContainerComponent,\n        PatternLanguageContainerDirective,\n        PatternContainerComponent,\n        PatternContainerDirective,\n        CreatePatternComponent,\n        ProcessOauthCallbackComponent,\n        PatternLanguageGraphComponent\n    ],\n    entryComponents: [\n    ],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class PatternLanguageManagementModule {\n}\n","<!--\n  ~ Copyright (c) 2018 University of Stuttgart.\n  ~\n  ~ See the NOTICE file(s) distributed with this work for additional\n  ~ information regarding copyright ownership.\n  ~\n  ~ This program and the accompanying materials are made available under the\n  ~ terms of the Eclipse Public License 2.0 which is available at\n  ~ http://www.eclipse.org/legal/epl-2.0, or the Apache Software License 2.0\n  ~ which is available at https://www.apache.org/licenses/LICENSE-2.0.\n  ~\n  ~ SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n  -->\n<pp-action-button-bar [addButtonText]=\"'Add'\" [goBackButton]=\"false\" [reloadButton]=\"true\"\n                      (addClicked)=\"goToPatternLanguageCreation()\"\n                      (reloadClicked)=\"reloadPatternRepo()\"></pp-action-button-bar>\n<div class=\"container\">\n    <mat-card class=\"landing-card\" *ngFor=\"let patternLanguage of patternLanguages\">\n        <mat-card-header>\n            <img *ngIf=\"patternLanguage?.logo && patternLanguage?.logo !== ''; else noImageAvatar\" mat-card-avatar\n                 [src]=\"patternLanguage.logo\">\n            <ng-template #noImageAvatar><img mat-card-avatar [src]=\"'//via.placeholder.com/50x50'\"></ng-template>\n\n            <mat-card-title *ngIf=\"patternLanguage?.name && '' !== patternLanguage.name; else noPLName\"\n                            style=\"width: 10rem; word-break: break-word;\">\n                {{patternLanguage.name}}\n            </mat-card-title>\n            <ng-template #noPLName>\n                <mat-card-title style=\"width: 10rem\">\n                    No Name Provided\n                </mat-card-title>\n            </ng-template>\n        </mat-card-header>\n        <img mat-card-image *ngIf=\"patternLanguage?.logo && patternLanguage?.logo !== ''; else noImage\"\n             [src]=\"patternLanguage.logo\">\n        <ng-template #noImage><img mat-card-image [src]=\"'//via.placeholder.com/200x300'\"></ng-template>\n        <mat-card-actions>\n            <div style=\"text-align: center\">\n                <button matBadge=\"{{patternLanguage?.patternCount}}\" mat-stroked-button color=\"primary\"\n                        (click)=\"navigateToPL(patternLanguage.id)\"><i class=\"material-icons\">pageview</i>View\n                </button>\n            </div>\n        </mat-card-actions>\n    </mat-card>\n</div>\n\n","/*\n * Copyright (c) 2018 University of Stuttgart.\n *\n * See the NOTICE file(s) distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0, or the Apache Software License 2.0\n * which is available at https://www.apache.org/licenses/LICENSE-2.0.\n *\n * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n */\n\nimport {ChangeDetectorRef, Component, NgZone, OnInit} from '@angular/core';\nimport PatternLanguage from '../../core/model/hal/pattern-language.model';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {MatDialog} from '@angular/material/dialog';\nimport {CookieService} from 'ngx-cookie-service';\nimport {ToasterService} from 'angular2-toaster';\nimport {PatternLanguageService} from '../../core/service/pattern-language.service';\nimport {CreateEditPatternLanguageComponent} from '../../core/component/create-edit-pattern-language/create-edit-pattern-language.component';\nimport {DialogPatternLanguageResult} from '../data/DialogPatternLanguageResult.interface';\nimport {map} from 'rxjs/operators';\nimport PatternLanguageModel from '../../core/model/hal/pattern-language-model.model';\n\n@Component({\n    selector: 'pp-pattern-language-management',\n    templateUrl: './pattern-language-management.component.html',\n    styleUrls: ['./pattern-language-management.component.scss']\n})\n\n\nexport class PatternLanguageManagementComponent implements OnInit {\n\n    patternLanguages: Array<PatternLanguageModel>;\n\n    constructor(\n        private cdr: ChangeDetectorRef,\n        private router: Router,\n        private activatedRoute: ActivatedRoute,\n        private zone: NgZone,\n        private dialog: MatDialog,\n        private _cookieService: CookieService,\n        private _toasterService: ToasterService,\n        private patternLanguageService: PatternLanguageService) {\n    }\n\n    // function used to sort the patternlanguages (by name)\n    private static sortPatternLanguages(pl1: PatternLanguageModel, pl2: PatternLanguageModel): number {\n        if (pl1.name > pl2.name) {\n            return 1;\n        }\n        if (pl1.name < pl2.name) {\n            return -1;\n        }\n        return 0;\n    }\n\n    ngOnInit() {\n        this.patternLanguages = Array.from<PatternLanguageModel>(this.activatedRoute.snapshot.data.patternlanguages.values())\n            .sort(PatternLanguageManagementComponent.sortPatternLanguages);\n    }\n\n    // reload the current data from https://purl.org/patternpedia that contains all patternlangauges\n    async reloadPatternRepo() {\n        this.patternLanguageService.getPatternLanguages()\n            .pipe(\n                map(result => result.sort(PatternLanguageManagementComponent.sortPatternLanguages)))\n            .subscribe(result => {\n                this.patternLanguages = result;\n                this._toasterService.pop('success', 'Reloaded Pattern Languages');\n                this.cdr.detectChanges();\n                return result;\n            });\n        this.cdr.detectChanges();\n    }\n\n    navigateToPL(id: string): void {\n        this.zone.run(() => {\n            this.router.navigate([id], {relativeTo: this.activatedRoute});\n        });\n    }\n\n    goToPatternLanguageCreation(): void {\n        const dialogRef = this.dialog.open(CreateEditPatternLanguageComponent, {data: {isPatternLanguageCreation: true}});\n\n        // Save PatternLanguage when user presses save\n        (<CreateEditPatternLanguageComponent>dialogRef.componentInstance).saveClicked\n            .subscribe((result: DialogPatternLanguageResult) => {\n                const patternLanguage = <PatternLanguage>result.dialogResult;\n                this.patternLanguageService.savePatternLanguage(patternLanguage)\n                    .subscribe(() => {\n                        this.patternLanguageService.getPatternLanguages()\n                            .pipe(\n                                map(patternLanguageModels => patternLanguageModels.sort(PatternLanguageManagementComponent.sortPatternLanguages)))\n                            .subscribe(patternLanguageModels => {\n                                this.patternLanguages = patternLanguageModels;\n                            });\n                        this._toasterService.pop('success', 'Pattern Language created');\n                    }, err => {\n                        console.error(err);\n                        this._toasterService.pop('error', 'Error occurred', JSON.stringify(err));\n                    });\n            });\n    }\n}\n"],"sourceRoot":"webpack:///"}